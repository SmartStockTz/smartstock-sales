import { ɵɵdefineInjectable, Injectable, ɵɵinject, Component, Input, EventEmitter, Output, Inject, Pipe, NgModule } from '@angular/core';
import { of } from 'rxjs';
import { __awaiter } from 'tslib';
import { MatDialogRef, MatDialog, MAT_DIALOG_DATA, MatDialogModule } from '@angular/material/dialog';
import { HttpClient } from '@angular/common/http';
import { BFast } from 'bfastjs';
import { v4 } from 'uuid';
import { Router, RouterModule } from '@angular/router';
import { FormControl, Validators, ReactiveFormsModule } from '@angular/forms';
import { debounceTime, distinctUntilChanged } from 'rxjs/operators';
import { MatButtonModule } from '@angular/material/button';
import { MatCardModule } from '@angular/material/card';
import { MatDividerModule } from '@angular/material/divider';
import { MatExpansionModule } from '@angular/material/expansion';
import { MatFormFieldModule } from '@angular/material/form-field';
import { MatIconModule } from '@angular/material/icon';
import { MatListModule } from '@angular/material/list';
import { MatMenuModule } from '@angular/material/menu';
import { MatProgressBarModule } from '@angular/material/progress-bar';
import { MatProgressSpinnerModule } from '@angular/material/progress-spinner';
import { MatSelectModule } from '@angular/material/select';
import { MatToolbarModule } from '@angular/material/toolbar';
import { MatBadgeModule } from '@angular/material/badge';
import { MatTooltipModule } from '@angular/material/tooltip';
import { MatRippleModule } from '@angular/material/core';
import { CommonModule } from '@angular/common';
import { MatSnackBar } from '@angular/material/snack-bar';

class EventService {
    constructor() {
    }
    broadcast(eventName, data) {
        const cE = new CustomEvent(eventName, {
            detail: data
        });
        window.dispatchEvent(cE);
    }
    listen(eventName, handler) {
        window.addEventListener(eventName, handler);
    }
    unListen(eventName, handler) {
        window.removeEventListener(eventName, handler);
    }
}
EventService.ɵprov = ɵɵdefineInjectable({ factory: function EventService_Factory() { return new EventService(); }, token: EventService, providedIn: "root" });
EventService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root'
            },] }
];
EventService.ctorParameters = () => [];

class LogService {
    constructor() {
    }
    i(message, tag, debug = false) {
        if (debug) {
            console.log(tag, message);
        }
    }
    e(message, tag, debug = false) {
        if (debug) {
            console.error(tag, message);
        }
    }
    w(message, tag, debug = false) {
        if (debug) {
            console.warn(tag, message);
        }
    }
}
LogService.ɵprov = ɵɵdefineInjectable({ factory: function LogService_Factory() { return new LogService(); }, token: LogService, providedIn: "root" });
LogService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root'
            },] }
];
LogService.ctorParameters = () => [];

class SecurityUtil {
    static generateUUID() {
        return v4();
    }
    static randomString(length) {
        let result = '';
        const characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';
        const charactersLength = characters.length;
        for (let i = 0; i < length; i++) {
            result += characters.charAt(Math.floor(Math.random() * charactersLength));
        }
        return result;
    }
}

const SsmEvents = {
    ACTIVE_SHOP_SET: '_ssm_active_shop_set_',
    ACTIVE_SHOP_REMOVE: '_ssm_active_shop_removed_',
    SETTINGS_UPDATED: '_ssm_settings_updated_',
    STOCK_UPDATED: '_ssm_stock_updated_',
    ADD_CART: 'add_cart',
    NO_OF_CART: 'noofProductsCart',
    CART_ITEMS: '_cart_items_'
};

class StorageService {
    constructor(eventApi) {
        this.eventApi = eventApi;
        this.smartStockCache = BFast.cache({ database: 'smartstock', collection: 'config' });
    }
    getActiveUser() {
        return __awaiter(this, void 0, void 0, function* () {
            return yield BFast.auth().currentUser();
        });
    }
    saveSales(batchs) {
        return __awaiter(this, void 0, void 0, function* () {
            const activeShop = yield this.getActiveShop();
            yield BFast.cache({ database: 'sales', collection: activeShop.projectId })
                .set(SecurityUtil.randomString(12), batchs, {
                dtl: 720
            });
        });
    }
    getActiveShop() {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.smartStockCache.get('activeShop');
            if (response) {
                return response;
            }
            else {
                throw { message: 'No Active Shop' };
            }
        });
    }
    saveActiveShop(shop) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.smartStockCache.set('activeShop', shop, {
                dtl: 7
            });
            this.eventApi.broadcast(SsmEvents.ACTIVE_SHOP_SET);
            return response;
        });
    }
    getCurrentProjectId() {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.smartStockCache.get('cPID');
        });
    }
    saveCurrentProjectId(projectId) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.smartStockCache.set('cPID', projectId, {
                dtl: 7
            });
        });
    }
    clearSmartStockCache() {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.smartStockCache.clearAll();
        });
    }
    saveActiveUser(user) {
        return __awaiter(this, void 0, void 0, function* () {
            return BFast.auth().setCurrentUser(user, 6);
        });
    }
    removeActiveShop() {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.smartStockCache.set('activeShop', undefined);
            this.eventApi.broadcast(SsmEvents.ACTIVE_SHOP_REMOVE);
            return response;
        });
    }
    removeActiveUser() {
        return __awaiter(this, void 0, void 0, function* () {
            return yield BFast.auth().setCurrentUser(undefined, 0);
        });
    }
    removeStocks() {
        return __awaiter(this, void 0, void 0, function* () {
            const shop = yield this.getActiveShop();
            return yield BFast.cache({ database: 'stocks', collection: shop.projectId }).clearAll();
        });
    }
    getStocks() {
        return __awaiter(this, void 0, void 0, function* () {
            const shop = yield this.getActiveShop();
            const stocksCache = BFast.cache({ database: 'stocks', collection: shop.projectId });
            return yield stocksCache.get('all');
        });
    }
    saveStocks(stocks) {
        return __awaiter(this, void 0, void 0, function* () {
            const shop = yield this.getActiveShop();
            const stocksCache = BFast.cache({ database: 'stocks', collection: shop.projectId });
            return yield stocksCache.set('all', stocks, {
                dtl: 360
            });
        });
    }
    saveStock(stock) {
        return __awaiter(this, void 0, void 0, function* () {
            // const shop = await this.getActiveShop();
            // const stocksCache = BFast.cache({database: 'stocks', collection: shop.projectId});
            // return stocksCache.set(stock.id, stock);
            return undefined;
        });
    }
    getCustomers() {
        return __awaiter(this, void 0, void 0, function* () {
            const shop = yield this.getActiveShop();
            const customersCache = BFast.cache({ database: 'customers', collection: shop.projectId });
            const customersKey = yield customersCache.keys();
            const customers = [];
            for (const key of customersKey) {
                customers.push(yield customersCache.get(key));
            }
            return customers;
        });
    }
    saveCustomer(customer) {
        return __awaiter(this, void 0, void 0, function* () {
            const shop = yield this.getActiveShop();
            const customersCache = BFast.cache({ database: 'customers', collection: shop.projectId });
            return yield customersCache.set(customer.displayName, customer, {
                dtl: 360
            });
        });
    }
}
StorageService.ɵprov = ɵɵdefineInjectable({ factory: function StorageService_Factory() { return new StorageService(ɵɵinject(EventService)); }, token: StorageService, providedIn: "root" });
StorageService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root'
            },] }
];
StorageService.ctorParameters = () => [
    { type: EventService }
];

class SettingsService {
    constructor(httpClient, storageService, indexDb) {
        this.httpClient = httpClient;
        this.storageService = storageService;
        this.indexDb = indexDb;
        this.ssmServerURL = 'https://smartstock-daas.bfast.fahamutech.com'; // environment.smartstock.databaseURL;
        this.ssmFunctionsURL = 'https://smartstock-faas.bfast.fahamutech.com'; // environment.smartstock.functionsURL;
        this.ssmHeader = {
            'X-Parse-Application-Id': 'smartstock'
        };
        this.ssmFunctionsHeader = {
            'bfast-application-id': 'smartstock',
            'content-type': 'application/json'
        };
    }
    getSSMUserHeader() {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                const user = yield this.storageService.getActiveUser();
                const activeShop = yield this.storageService.getActiveShop();
                if (!user) {
                    // console.log('no user records found');
                    throw new Error('no user records found');
                }
                if (user && user.sessionToken && activeShop && activeShop.applicationId) {
                    return {
                        'X-Parse-Application-Id': 'smartstock',
                        'X-Parse-Session-Token': user.sessionToken,
                        'Content-Type': 'application/json'
                    };
                }
                else {
                    throw new Error('token not found');
                }
            }
            catch (e) {
                throw { message: 'Fails to get user, so to retrieve token' };
            }
        });
    }
    getCustomerApplicationId() {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                const activeShop = yield this.storageService.getActiveShop();
                if (!activeShop) {
                    throw new Error('No user record');
                }
                return activeShop.applicationId;
            }
            catch (e) {
                throw { message: 'Fails to get application id', reason: e.toString() };
            }
        });
    }
    getCustomerServerURLId() {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                const activeShop = yield this.storageService.getActiveShop();
                if (!activeShop) {
                    throw new Error('No user in local storage');
                }
                return activeShop.projectUrlId;
            }
            catch (reason) {
                throw { message: 'Fails to get user', reason: reason.toString() };
            }
        });
    }
    getCustomerHeader() {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                return {
                    'X-Parse-Application-Id': yield this.getCustomerApplicationId()
                };
            }
            catch (e) {
                console.warn(e);
                return {};
            }
        });
    }
    getCustomerPostHeader(contentType) {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                return {
                    'X-Parse-Application-Id': yield this.getCustomerApplicationId(),
                    'content-type': contentType ? contentType : 'application/json'
                };
            }
            catch (e) {
                throw { message: 'Fails to get customer post header', reason: e.toString() };
            }
        });
    }
    getCustomerServerURL() {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                return `https://${yield this.getCustomerServerURLId()}.bfast.fahamutech.com`;
            }
            catch (e) {
                throw { message: 'Fails to get server url', reason: e.toString() };
            }
        });
    }
    getCustomerProjectId() {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                const activeShop = yield this.indexDb.getActiveShop();
                if (!activeShop) {
                    throw new Error('No user in local storage');
                }
                return activeShop.projectId;
            }
            catch (e) {
                throw { message: 'Fails to get project id', reason: e.toString() };
            }
        });
    }
    /**
     * @deprecated
     */
    getPrinterAddress(callback) {
        // this.indexDb.getItem<{ ip: string, name: string }>('printerAddress').then(value => {
        //   callback(null);
        // }).catch(reason => {
        //   console.log(reason);
        //   callback(null);
        // });
        callback(null);
    }
    saveSettings(settings) {
        return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            try {
                const activeShop = yield this.storageService.getActiveShop();
                this.httpClient.put(this.ssmFunctionsURL + '/settings/' + activeShop.projectId, settings, {
                    headers: this.ssmFunctionsHeader
                }).subscribe(_ => {
                    activeShop.settings = _.settings;
                    this.storageService.saveActiveShop(activeShop).then(_1 => {
                        resolve('Shop settings updated');
                    }).catch(reason => {
                        reject(reason);
                    });
                }, error => {
                    reject(error);
                });
            }
            catch (e) {
                reject(e);
            }
        }));
    }
    getSettings() {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                const activeShop = yield this.storageService.getActiveShop();
                if (!activeShop || !activeShop.settings) {
                    return {
                        printerFooter: 'Thank you',
                        printerHeader: '',
                        saleWithoutPrinter: true,
                        allowRetail: true,
                        allowWholesale: true,
                    };
                }
                return activeShop.settings;
            }
            catch (e) {
                throw { message: 'Fails to get settings', reason: e.toString() };
            }
        });
    }
}
SettingsService.ɵprov = ɵɵdefineInjectable({ factory: function SettingsService_Factory() { return new SettingsService(ɵɵinject(HttpClient), ɵɵinject(StorageService), ɵɵinject(StorageService)); }, token: SettingsService, providedIn: "root" });
SettingsService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root'
            },] }
];
SettingsService.ctorParameters = () => [
    { type: HttpClient },
    { type: StorageService },
    { type: StorageService }
];

class VerifyEMailDialogComponent {
    constructor(dialogRef) {
        this.dialogRef = dialogRef;
    }
}
VerifyEMailDialogComponent.decorators = [
    { type: Component, args: [{
                template: `
    <div>
      <div mat-dialog-title>Account Verification</div>
      <div mat-dialog-content>
        <p>
          Your email is not verified we send a link to the email
          <br>
          you use when open account for you to verify your account
        </p>
      </div>
      <div mat-dialog-actions>
        <button (click)="dialogRef.close()" mat-button color="primary">Close</button>
      </div>
    </div>
  `
            },] }
];
VerifyEMailDialogComponent.ctorParameters = () => [
    { type: MatDialogRef }
];

class UserService {
    constructor(httpClient, settingsService, dialog, logger, storageService) {
        this.httpClient = httpClient;
        this.settingsService = settingsService;
        this.dialog = dialog;
        this.logger = logger;
        this.storageService = storageService;
    }
    currentUser() {
        return __awaiter(this, void 0, void 0, function* () {
            const user = yield BFast.auth().currentUser();
            if (user && user.role !== 'admin') {
                return user;
            }
            else if (user && user.verified === true) {
                return user;
            }
            else {
                return yield BFast.auth().setCurrentUser(undefined);
            }
        });
    }
    deleteUser(user) {
        return __awaiter(this, void 0, void 0, function* () {
            return BFast.functions()
                .request('/functions/users/' + user.id)
                .delete({
                data: { context: { admin: yield BFast.auth().currentUser() } }
            });
        });
    }
    getAllUser(pagination) {
        return __awaiter(this, void 0, void 0, function* () {
            const projectId = yield this.settingsService.getCustomerProjectId();
            return BFast.database().collection('_User')
                .query()
                .equalTo('projectId', projectId)
                .includesIn('role', ['user', 'manager'])
                .size(pagination.size)
                .skip(pagination.skip)
                .find({
                useMasterKey: true
            });
        });
    }
    getUser(user, callback) {
    }
    login(user) {
        return __awaiter(this, void 0, void 0, function* () {
            const authUser = yield BFast.auth().logIn(user.username, user.password);
            yield this.storageService.removeActiveShop();
            if (authUser && authUser.role !== 'admin') {
                yield this.storageService.saveActiveUser(authUser);
                return authUser;
            }
            else if (authUser && authUser.verified === true) {
                yield this.storageService.saveActiveUser(authUser);
                return authUser;
            }
            else {
                yield BFast.functions().request('/functions/users/reVerifyAccount/' + user.username).post();
                this.dialog.open(VerifyEMailDialogComponent, {
                    closeOnNavigation: true,
                    disableClose: true
                });
                throw { code: 403, err: 'account not verified' };
            }
        });
    }
    logout(user) {
        return __awaiter(this, void 0, void 0, function* () {
            yield BFast.auth().logOut();
            yield this.storageService.removeActiveUser();
            yield this.storageService.removeActiveShop();
            return;
        });
    }
    register(user) {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                user.settings = {
                    printerFooter: 'Thank you',
                    printerHeader: '',
                    saleWithoutPrinter: true,
                    allowRetail: true,
                    allowWholesale: true
                };
                user.shops = [];
                yield this.storageService.removeActiveShop();
                return yield BFast.functions().request('/functions/users/create').post(user, {
                    headers: this.settingsService.ssmFunctionsHeader
                });
            }
            catch (e) {
                if (e && e.response && e.response.data) {
                    throw e.response.data;
                }
                else {
                    throw e.toString();
                }
            }
        });
    }
    resetPassword(username) {
        return BFast.functions().request('/functions/users/resetPassword/' + encodeURIComponent(username)).get();
    }
    refreshToken() {
        return __awaiter(this, void 0, void 0, function* () {
            return BFast.auth().currentUser();
        });
    }
    addUser(user) {
        return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            const shop = yield this.storageService.getActiveShop();
            const shops = user.shops ? user.shops : [];
            const shops1 = shops.filter(value => value.applicationId !== shop.applicationId);
            user.applicationId = shop.applicationId;
            user.projectUrlId = shop.projectUrlId;
            user.projectId = shop.projectId;
            user.businessName = shop.businessName;
            user.settings = shop.settings;
            user.shops = shops1;
            this.httpClient.post(this.settingsService.ssmFunctionsURL + '/functions/users/seller', user, {
                headers: this.settingsService.ssmFunctionsHeader
            }).subscribe(value => {
                resolve(value);
            }, error => {
                reject(error);
            });
        }));
    }
    getShops() {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                const user = yield this.storageService.getActiveUser();
                const shops = [];
                user.shops.forEach(element => {
                    shops.push(element);
                });
                shops.push({
                    businessName: user.businessName,
                    projectId: user.projectId,
                    applicationId: user.applicationId,
                    projectUrlId: user.projectUrlId,
                    settings: user.settings,
                    street: user.street,
                    country: user.country,
                    region: user.region
                });
                return shops;
            }
            catch (e) {
                throw e;
            }
        });
    }
    getCurrentShop() {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                const activeShop = yield this.storageService.getActiveShop();
                if (activeShop && activeShop.projectId && activeShop.applicationId && activeShop.projectUrlId) {
                    return activeShop;
                }
                else {
                    throw new Error('No active shop in records');
                }
            }
            catch (e) {
                throw e;
            }
        });
    }
    saveCurrentShop(shop) {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                yield this.storageService.saveCurrentProjectId(shop.projectId);
                return yield this.storageService.saveActiveShop(shop);
            }
            catch (e) {
                throw e;
            }
        });
    }
    createShop(data) {
        return undefined;
        // return new Promise<ShopModel>(async (resolve, reject) => {
        //   this.httpClient.post<ShopModel>(this.settings.ssmFunctionsURL + '/functions/shop', data, {
        //     headers: this.settings.ssmFunctionsHeader
        //   }).subscribe(value => {
        //     resolve(value);
        //   }, error => {
        //     reject(error);
        //   });
        // });
    }
    deleteShop(shop) {
        return undefined;
        // return new Promise<ShopModel>((resolve, reject) => {
        //   this.httpClient.delete(this.settings.ssmFunctionsURL + '/functions/shop', {
        //   })
        // });
    }
    updatePassword(user, password) {
        return new Promise((resolve, reject) => {
            this.httpClient.put(this.settingsService.ssmFunctionsURL + '/functions/users/password/' + user.id, {
                password: password
            }, {
                headers: this.settingsService.ssmFunctionsHeader
            }).subscribe(value => {
                resolve(value);
            }, error => {
                reject(error);
            });
        });
    }
    updateUser(user, data) {
        return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            this.httpClient.put(this.settingsService.ssmFunctionsURL + '/functions/users/' + user.id, data, {
                headers: this.settingsService.ssmFunctionsHeader
            }).subscribe(value => resolve(value), error1 => {
                reject(error1);
            });
        }));
    }
    updateCurrentUser(user) {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                return yield this.storageService.saveActiveUser(user);
            }
            catch (e) {
                throw e;
            }
        });
    }
    changePasswordFromOld(data) {
        return new Promise((resolve, reject) => {
            this.httpClient.put(this.settingsService.ssmFunctionsURL + '/functions/users/password/change/' + data.user.id, {
                lastPassword: data.lastPassword,
                username: data.user.username,
                password: data.password
            }, {
                headers: this.settingsService.ssmFunctionsHeader
            }).subscribe(value => resolve(value), error1 => {
                reject(error1);
            });
        });
    }
}
UserService.ɵprov = ɵɵdefineInjectable({ factory: function UserService_Factory() { return new UserService(ɵɵinject(HttpClient), ɵɵinject(SettingsService), ɵɵinject(MatDialog), ɵɵinject(LogService), ɵɵinject(StorageService)); }, token: UserService, providedIn: "root" });
UserService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root'
            },] }
];
UserService.ctorParameters = () => [
    { type: HttpClient },
    { type: SettingsService },
    { type: MatDialog },
    { type: LogService },
    { type: StorageService }
];

class ConfigsService {
}
ConfigsService.versionName = '';
ConfigsService.ɵprov = ɵɵdefineInjectable({ factory: function ConfigsService_Factory() { return new ConfigsService(); }, token: ConfigsService, providedIn: "root" });
ConfigsService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root'
            },] }
];

class DrawerComponent {
    constructor(userService, logger, eventApi) {
        this.userService = userService;
        this.logger = logger;
        this.eventApi = eventApi;
        this.versionNumber = of();
        this.selectedMenu = {
            background: '#1b5e20',
            borderTopRightRadius: '50px',
            borderBottomRightRadius: '50px',
            color: 'white'
        };
    }
    ngOnInit() {
        this.versionNumber = of(ConfigsService.versionName);
        this.userService.getCurrentShop().then(shop => {
            this.shop = shop;
        }).catch(reason => {
            this.logger.i(reason);
            this.shop = undefined;
        });
        this.userService.currentUser().then(user => {
            this.currentUser = user;
        });
        this.eventApi.listen(SsmEvents.SETTINGS_UPDATED, data => {
            this.userService.getCurrentShop().then(shop => {
                this.shop = shop;
            }).catch(reason => {
                this.logger.e(reason, 'AdminDrawerComponent:37');
                this.shop = undefined;
            });
        });
    }
    shouldExpand(route) {
        const url = new URL(location.href);
        return url.pathname.startsWith('/' + route);
    }
    isManager() {
        return this.currentUser && (this.currentUser.role === 'admin' || this.currentUser.role === 'manager');
    }
    isAdmin() {
        return this.currentUser && (this.currentUser.role === 'admin');
    }
}
DrawerComponent.decorators = [
    { type: Component, args: [{
                selector: 'smartstock-drawer',
                template: `
    <div class="my-side-nav">
      <div>
        <div class="d-flex justify-content-center align-items-center flex-column" style="padding-bottom: 8px">
          <div style="padding: 16px; justify-content: center; align-items: center">
            <mat-icon style="width: 70px; height: 70px; font-size: 70px" color="primary">store</mat-icon>
          </div>
          <span style="max-width: 150px; overflow: hidden; text-overflow: ellipsis;"
                *ngIf="shop">{{shop.businessName}}</span>
          <span style="width: 4px; height: 4px"></span>
          <button style="width: 80%"
                  color="primary"
                  class="btn-block"
                  routerLink="/account/shop" mat-button>
            Change Shop
          </button>
        </div>

        <div class="d-flex justify-content-center align-items-center">
          <mat-divider></mat-divider>
        </div>

        <mat-accordion [multi]="true" class="mat-elevation-z0">
          <mat-nav-list *ngIf="isAdmin()" class="mat-elevation-z0">
            <mat-list-item [ngStyle]="shouldExpand('dashboard')?selectedMenu:{}" routerLink="/dashboard">
              <mat-icon matListIcon matPrefix>dashboard</mat-icon>
              <span matLine style="margin-left: 8px">Dashboard</span>
            </mat-list-item>
          </mat-nav-list>

          <mat-divider *ngIf="isAdmin()"></mat-divider>

          <mat-expansion-panel *ngIf="isAdmin()" [expanded]="shouldExpand('report')" class="mat-elevation-z0">
            <mat-expansion-panel-header>
              <mat-icon matPrefix>table_chart</mat-icon>
              <span style="margin-left: 8px">Reports</span>
            </mat-expansion-panel-header>
            <mat-nav-list>
              <a mat-list-item routerLink="/report/sales">Sales Reports</a>
              <a mat-list-item routerLink="/report/stocks">Stock Reports</a>
            </mat-nav-list>
          </mat-expansion-panel>

          <mat-divider *ngIf="currentUser && currentUser.role==='admin'"></mat-divider>

          <mat-nav-list>
            <mat-list-item [ngStyle]="shouldExpand('sale')?selectedMenu:{}" routerLink="/sale">
              <mat-icon matListIcon matPrefix>shop_front</mat-icon>
              <span matLine style="margin-left: 8px">Sale</span>
            </mat-list-item>
          </mat-nav-list>

          <mat-divider></mat-divider>

          <mat-expansion-panel *ngIf="isManager()" [expanded]="shouldExpand('purchase')" class="mat-elevation-z0">
            <mat-expansion-panel-header>
              <mat-icon matPrefix>receipts</mat-icon>
              <span style="margin-left: 8px">Purchase</span>
            </mat-expansion-panel-header>
            <mat-nav-list>
              <a mat-list-item routerLink="/purchase">All Purchases</a>
              <a mat-list-item routerLink="/purchase/create">New Purchase</a>
              <a mat-list-item routerLink="/stock" [queryParams]="{t:3}">Suppliers</a>
            </mat-nav-list>
          </mat-expansion-panel>

          <mat-divider *ngIf="currentUser && (currentUser.role==='admin' || currentUser.role === 'manager')"></mat-divider>

          <mat-nav-list *ngIf="isManager()">
            <mat-list-item [ngStyle]="shouldExpand('stock')?selectedMenu:{}" routerLink="/stock">
              <mat-icon matListIcon matPrefix>store</mat-icon>
              <span matLine style="margin-left: 8px">Stock</span>
            </mat-list-item>
          </mat-nav-list>

          <mat-divider *ngIf="isManager()"></mat-divider>

          <mat-expansion-panel [expanded]="shouldExpand('settings')" class="mat-elevation-z0">
            <mat-expansion-panel-header>
              <mat-icon matPrefix>supervisor_account</mat-icon>
              <span style="margin-left: 8px">Account</span>
            </mat-expansion-panel-header>
            <mat-nav-list>
              <a *ngIf="isManager()" mat-list-item
                 routerLink="/account/settings">
                <div class="d-flex flex-row flex-nowrap btn-block">
                  <span>Settings</span>
                  <span class="flex-grow-1"></span>
                  <mat-icon>settings</mat-icon>
                </div>
              </a>
              <a *ngIf="isManager()" mat-list-item
                 routerLink="/account/users">
                <div class="d-flex flex-row flex-nowrap btn-block">
                  <span>Users</span>
                  <span class="flex-grow-1"></span>
                  <mat-icon>person_add</mat-icon>
                </div>
              </a>
              <a mat-list-item routerLink="/account/profile">
                <div class="d-flex flex-row flex-nowrap btn-block">
                  <span>Profile</span>
                  <span class="flex-grow-1"></span>
                  <mat-icon>person</mat-icon>
                </div>
              </a>
            </mat-nav-list>
          </mat-expansion-panel>
        </mat-accordion>

      </div>
      <span style="flex-grow: 1"></span>
      <div style="display: flex; justify-content: center; align-items: center">
        <span>Version: {{versionNumber | async}}</span>
      </div>
    </div>
  `,
                styles: [".my-side-nav{display:flex;flex-direction:column;min-height:100vh;width:100%;z-index:50000}.drawer-head{background-position:50%;background-repeat:no-repeat;background-size:cover;height:180px}div.mat-list-item-content{width:100%!important}mat-divider{margin-left:10%;margin-right:10%;width:80%}"]
            },] }
];
DrawerComponent.ctorParameters = () => [
    { type: UserService },
    { type: LogService },
    { type: EventService }
];
DrawerComponent.propDecorators = {
    versionNumber: [{ type: Input }]
};

class ToolbarComponent {
    constructor(router, storage, userDatabase, eventService) {
        this.router = router;
        this.storage = storage;
        this.userDatabase = userDatabase;
        this.eventService = eventService;
        this.showProgress = false;
        this.hasBackRoute = false;
        this.showSearch = false;
        this.searchCallback = new EventEmitter();
        this.searchInputControl = new FormControl('');
        this.searchProgressFlag = false;
        this.isMobile = false; // environment.android;
    }
    ngOnInit() {
        this.storage.getActiveUser().then(user => {
            this.currentUser = user;
        });
        this.searchInputControl.valueChanges.pipe(debounceTime(500), distinctUntilChanged()).subscribe(_ => {
            this.searchCallback.emit(this.searchInputControl.value);
        });
        this.getProductsInCart();
        this._clearSearchInputListener();
    }
    getProductsInCart() {
        this.eventService.listen(SsmEvents.NO_OF_CART, (data) => {
            this.noOfProductsInCart = data.detail;
        });
    }
    logout() {
        this.userDatabase.logout(null).finally(() => {
            return this.router.navigateByUrl('');
        }).catch(err => console.log(''));
    }
    _clearSearchInputListener() {
        // this.eventService.listen(SsmEvents.ADD_CART, data => {
        //   this.searchInputControl.reset('');
        // });
    }
}
ToolbarComponent.decorators = [
    { type: Component, args: [{
                selector: 'smartstock-toolbar',
                template: `
    <mat-toolbar color="primary" class="sticky-top mat-elevation-z4">
      <mat-toolbar-row>
<!--        <button routerLink="{{backLink}}" *ngIf="hasBackRoute && backLink" mat-icon-button>-->
<!--          <mat-icon>arrow_back</mat-icon>-->
<!--        </button>-->
        <button mat-icon-button (click)="sidenav.toggle()">
          <mat-icon>menu</mat-icon>
        </button>
        <span>{{heading}}</span>
        <span *ngIf="isMobile" style="flex: 1 1 auto"></span>
        <span *ngIf="!isMobile && showSearch" style="width: 16px"></span>
        <span *ngIf="!isMobile && !showSearch" style="flex: 1 1 auto"></span>
        <smartstock-search-input [searchProgressFlag]="searchProgressFlag"
                          *ngIf="!isMobile && showSearch" style="flex: 1 1 auto"
                          [showSearch]="showSearch"
                          [searchInputControl]="searchInputControl"
                          [searchPlaceholder]="searchPlaceholder">
        </smartstock-search-input>
        <span *ngIf="!isMobile && showSearch" style="width: 16px"></span>
        <button *ngIf="noOfProductsInCart> 0 && !isMobile" mat-icon-button (click)="cartdrawer.toggle()"
                [matBadge]="noOfProductsInCart">
          <mat-icon>shopping_cart</mat-icon>
        </button>
        <button *ngIf="!isMobile" class="ft-button" mat-button [matMenuTriggerFor]="menu">
          <mat-icon>account_circle</mat-icon>
          <span *ngIf="currentUser">{{"  " + currentUser.username}}</span>
        </button>
        <button *ngIf="isMobile" mat-icon-button [matMenuTriggerFor]="menu">
          <mat-icon>more_vert</mat-icon>
          <!--      <span *ngIf="currentUser">{{"  " + currentUser.username}}</span>-->
        </button>
        <mat-menu #menu>
          <button mat-menu-item (click)="logout()">
            <mat-icon>exit_to_app</mat-icon>
            Logout
          </button>
          <button mat-menu-item routerLink="/account/profile">
            <mat-icon>person</mat-icon>
            My Profile
          </button>
        </mat-menu>
      </mat-toolbar-row>

      <mat-toolbar-row *ngIf="isMobile && showSearch">
        <!--    <span style="flex-grow: 1"></span>-->
        <smartstock-search-input [searchProgressFlag]="searchProgressFlag"
                          style="flex: 1 1 auto"
                          [showSearch]="showSearch"
                          [searchInputControl]="searchInputControl"
                          [searchPlaceholder]="searchPlaceholder">
        </smartstock-search-input>
        <!--    <span style="flex-grow: 1"></span>-->
      </mat-toolbar-row>
    </mat-toolbar>
  `
            },] }
];
ToolbarComponent.ctorParameters = () => [
    { type: Router },
    { type: StorageService },
    { type: UserService },
    { type: EventService }
];
ToolbarComponent.propDecorators = {
    heading: [{ type: Input }],
    showProgress: [{ type: Input }],
    sidenav: [{ type: Input }],
    hasBackRoute: [{ type: Input }],
    backLink: [{ type: Input }],
    cartdrawer: [{ type: Input }],
    showSearch: [{ type: Input }],
    searchCallback: [{ type: Output }],
    searchInputControl: [{ type: Input }],
    searchPlaceholder: [{ type: Input }],
    searchProgressFlag: [{ type: Input }]
};

class NoStockDialogComponent {
    constructor(dialogRef, data) {
        this.dialogRef = dialogRef;
        this.data = data;
    }
    ngOnInit() {
    }
}
NoStockDialogComponent.decorators = [
    { type: Component, args: [{
                selector: 'smartstock-no-stock-dialog',
                template: `
    <div>
      <h5>Hello!</h5>
      <mat-card-subtitle mat-dialog-content>
        StockModel is not available yet, add product or refresh your stock
      </mat-card-subtitle>
      <div mat-dialog-actions>
        <button (click)="dialogRef.close()" routerLink="/stock" mat-flat-button color="primary">Go To StockModel</button>
        <button (click)="dialogRef.close()" mat-flat-button color="warn">Close</button>
      </div>
    </div>
  `
            },] }
];
NoStockDialogComponent.ctorParameters = () => [
    { type: MatDialogRef },
    { type: undefined, decorators: [{ type: Inject, args: [MAT_DIALOG_DATA,] }] }
];

class ShopsPipe {
    constructor(userApi) {
        this.userApi = userApi;
    }
    transform(shops, ...args) {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                const shop = yield this.userApi.getCurrentShop();
                shops.push(shop);
                return shops.map(value => value.businessName);
            }
            catch (e) {
                return [];
            }
        });
    }
}
ShopsPipe.decorators = [
    { type: Pipe, args: [{
                name: 'shopsPipe'
            },] }
];
ShopsPipe.ctorParameters = () => [
    { type: UserService }
];

class OnFetchComponent {
    constructor() {
        this.refreshCallback = new EventEmitter();
    }
    ngOnInit() {
    }
    callBack() {
        this.refreshCallback.emit();
    }
}
OnFetchComponent.decorators = [
    { type: Component, args: [{
                selector: 'smartstock-on-fetch',
                template: `
    <div *ngIf="!isLoading" class="no-data-wrapper">
      <img src="/src/assets/img/empty.svg" width="200px" alt="">
      <h4>No Data</h4>
      <button (click)="callBack()" matTooltip="Click to refresh" mat-raised-button mat-icon-button>
        <mat-icon color="accent">
          refresh
        </mat-icon>
      </button>
    </div>

    <div *ngIf="isLoading" class="no-data-wrapper">
      <img src="/src/assets/img/data.svg" width="200px" alt="">
      <h4>Fetching data...</h4>
      <mat-progress-spinner color="accent" mode="indeterminate" [diameter]="30"></mat-progress-spinner>
    </div>
  `,
                styles: [".no-data-wrapper{align-items:center;display:flex;flex-direction:column;justify-content:center;margin-top:48px}.no-data-wrapper>h4{padding:8px}"]
            },] }
];
OnFetchComponent.ctorParameters = () => [];
OnFetchComponent.propDecorators = {
    refreshCallback: [{ type: Output }],
    isLoading: [{ type: Input }]
};

class SearchInputComponent {
    constructor() {
        this.showSearch = false;
        this.searchProgressFlag = false;
        this.searchPlaceholder = 'Enter something...';
    }
    ngOnInit() {
    }
}
SearchInputComponent.decorators = [
    { type: Component, args: [{
                selector: 'smartstock-search-input',
                template: `
    <div style="width: 100%">
      <input [formControl]="searchInputControl"
             *ngIf="showSearch"
             class="toolbar-input" type="text" placeholder="{{searchPlaceholder}}">
      <mat-progress-spinner style="display: inline-block; margin-left: -30px"
                            mode="indeterminate" diameter="25"
                            color="primary"
                            *ngIf="showSearch && searchProgressFlag"
                            matSuffix>
        <!--      <mat-icon>search</mat-icon>-->
      </mat-progress-spinner>
    </div>
  `,
                styles: [".toolbar-input{background:hsla(0,0%,96.5%,.76);border:none;border-radius:4px;box-shadow:none;color:#000;outline:none;padding:8px;width:100%}.toolbar-input::-moz-placeholder{color:#535353}.toolbar-input:-ms-input-placeholder{color:#535353}.toolbar-input::placeholder{color:#535353}.toolbar-input:focus{outline:none}"]
            },] }
];
SearchInputComponent.ctorParameters = () => [];
SearchInputComponent.propDecorators = {
    searchInputControl: [{ type: Input }],
    showSearch: [{ type: Input }],
    searchProgressFlag: [{ type: Input }],
    searchPlaceholder: [{ type: Input }]
};

class BottomBarComponent {
    constructor() {
    }
    ngOnInit() {
    }
    activeNav(route) {
        const url = new URL(location.href);
        return url.pathname.startsWith('/' + route);
    }
}
BottomBarComponent.decorators = [
    { type: Component, args: [{
                selector: 'smartstock-bottom-bar',
                template: `
    <mat-toolbar class="fixed-bottom bottom-smartstock-bar">

      <div class="flex-grow-1 d-flex justify-content-center align-items-center flex-column">
        <button mat-icon-button *ngIf="activeNav('dashboard')" mat-flat-button routerLink="/dashboard">
          <mat-icon color="{{activeNav('dashboard')?'primary':''}}">dashboard</mat-icon>
        </button>
        <button *ngIf="!activeNav('dashboard')" mat-icon-button routerLink="/dashboard">
          <mat-icon>dashboard</mat-icon>
        </button>
        <!--    <span *ngIf="activeNav('dashboard')">Dashboard</span>-->
      </div>

      <div class="flex-grow-1 d-flex justify-content-center align-items-center flex-column">
        <button mat-icon-button *ngIf="activeNav('sale')" mat-flat-button routerLink="/sale">
          <mat-icon color="{{activeNav('sale')?'primary':''}}">shop</mat-icon>
        </button>
        <button *ngIf="!activeNav('sale')" mat-icon-button routerLink="/sale">
          <mat-icon>shop</mat-icon>
        </button>
        <!--    <span *ngIf="activeNav('sale')">Sale</span>-->
      </div>

      <div class="flex-grow-1 d-flex justify-content-center align-items-center flex-column">
        <button mat-icon-button *ngIf="activeNav('purchase')" mat-flat-button routerLink="/purchase">
          <mat-icon color="{{activeNav('purchase')?'primary':''}}">receipt</mat-icon>
        </button>
        <button *ngIf="!activeNav('purchase')" mat-icon-button routerLink="/purchase">
          <mat-icon>receipt</mat-icon>
        </button>
        <!--    <span *ngIf="activeNav('purchase')">Purchase</span>-->
      </div>

      <div class="flex-grow-1 d-flex justify-content-center align-items-center flex-column">
        <button mat-icon-button *ngIf="activeNav('stock')" mat-flat-button routerLink="/stock">
          <mat-icon color="{{activeNav('stock')?'primary':''}}">store</mat-icon>
        </button>
        <button *ngIf="!activeNav('stock')" mat-icon-button routerLink="/stock">
          <mat-icon>store</mat-icon>
        </button>
        <!--    <span *ngIf="activeNav('stock')">StockModel</span>-->
      </div>

      <div class="flex-grow-1 d-flex justify-content-center align-items-center flex-column">
        <button mat-icon-button *ngIf="activeNav('settings')" mat-flat-button routerLink="/account">
          <mat-icon color="{{activeNav('settings')?'primary':''}}">settings</mat-icon>
        </button>
        <button *ngIf="!activeNav('settings')" mat-icon-button routerLink="/account">
          <mat-icon>settings</mat-icon>
        </button>
        <!--    <span *ngIf="activeNav('settings')">Settings</span>-->
      </div>

    </mat-toolbar>
  `,
                styles: ["span{font-size:11px;font-weight:lighter}.bottom-smartstock-bar{background:#fff;box-shadow:0 -1px 7px rgba(0,0,0,.35)}"]
            },] }
];
BottomBarComponent.ctorParameters = () => [];

class DataNotReadyComponent {
    constructor() {
        this.width = 200;
        this.height = 200;
        this.isLoading = false;
    }
    ngOnInit() {
    }
}
DataNotReadyComponent.decorators = [
    { type: Component, args: [{
                selector: 'smartstock-data-not-ready',
                template: `
    <div *ngIf="!isLoading" style="margin-top: 10px; margin-bottom: 10px"
         class="d-flex flex-column justify-content-center align-items-center">
      <img alt="no data" src="../../../../assets/img/data.svg" width="{{width}}" height="{{height}}"/>
      <span>Data is not ready yet</span>
    </div>
    <div *ngIf="isLoading" style="width: 100%; height: 100%; display: flex; justify-content: center; align-items: center">
      <mat-progress-spinner mode="indeterminate" [diameter]="30"></mat-progress-spinner>
    </div>
  `
            },] }
];
DataNotReadyComponent.ctorParameters = () => [];
DataNotReadyComponent.propDecorators = {
    width: [{ type: Input }],
    height: [{ type: Input }],
    isLoading: [{ type: Input }]
};

class UploadFilesComponent {
    constructor() {
        this.files = [];
        this.uploadFileFormControl = new FormControl([], [Validators.nullValidator, Validators.required]);
    }
    ngOnInit() {
    }
    removeFile($event, i) {
        $event.preventDefault();
        this.files.splice(i, 1);
    }
    uploadFiles($event, uploadFile) {
        return __awaiter(this, void 0, void 0, function* () {
            const files = $event.target['files'];
            if (files.item(0)) {
                const file = files.item(0);
                if (this.files.length === 0) {
                    this.files.push({
                        name: file.name,
                        type: file.type,
                        url: file,
                    });
                }
                else {
                    this.files = this.files.filter(value => file.name !== value.name);
                    this.files.push({
                        name: file.name,
                        type: file.type,
                        url: file
                    });
                }
                this.uploadFileFormControl.setValue(this.files);
                uploadFile.value = '';
            }
        });
    }
}
UploadFilesComponent.decorators = [
    { type: Component, args: [{
                selector: 'smartstock-upload-files',
                template: `
    <div style="display: flex; flex-direction: row; flex-wrap: wrap; align-items: center; padding: 8px">
      <div *ngFor="let file of files; let i =index"
           style="display: flex; flex-direction: row; flex-wrap: nowrap; align-items: center">
        <mat-card style="height: 50px; margin: 5px; display: flex; flex-direction: row; align-items: center">
          <span style="max-width: 200px; overflow: hidden; white-space: nowrap; text-overflow: ellipsis">
            {{file.name}}
          </span>
          <span style="width: 10px"></span>
          <button mat-icon-button style="display: inline-block" (click)="removeFile($event, i)">
            <mat-icon color="warn">delete</mat-icon>
          </button>
        </mat-card>
      </div>
      <mat-card (click)="uploadFile.click()" matRipple style="width: 120px; height: 50px; margin: 5px">
        <mat-icon>attachment</mat-icon>
        <span>Add File</span>
      </mat-card>
    </div>

    <input style="display: none" #uploadFile [multiple]="false" type="file" (change)="uploadFiles($event,uploadFile)">
  `
            },] }
];
UploadFilesComponent.ctorParameters = () => [];
UploadFilesComponent.propDecorators = {
    files: [{ type: Input }],
    uploadFileFormControl: [{ type: Input }]
};

class DashCardComponent {
    constructor(router) {
        this.router = router;
        this.title = '';
        this.height = 300;
        this.description = '';
    }
    ngOnInit() {
    }
    goTo() {
        if (this.reportLink) {
            this.router.navigateByUrl(this.reportLink).catch(console.log);
        }
    }
}
DashCardComponent.decorators = [
    { type: Component, args: [{
                selector: 'smartstock-dash-card',
                template: `
    <mat-card class="d-flex flex-column" [ngStyle]="{height:height+'px'}">
      <mat-card-header style="margin: 0">
        <span>{{title}}</span>
        <span style="margin-left: 8px"></span>
        <mat-icon matTooltip="{{description}}">info_outline</mat-icon>
      </mat-card-header>
      <mat-card-content class="flex-grow-1">
        <ng-container [ngTemplateOutlet]="content"></ng-container>
      </mat-card-content>
      <hr *ngIf="reportLink" style="width: 100%; margin: 0; padding: 0">
      <mat-card-actions *ngIf="reportLink" class="d-flex flex-row">
        <span style="flex: 1 1 auto"></span>
        <button (click)="goTo()"color="primary" mat-button>
          EXPLORE REPORT
          <mat-icon matSuffix>arrow_forward</mat-icon>
        </button>
      </mat-card-actions>
    </mat-card>
  `
            },] }
];
DashCardComponent.ctorParameters = () => [
    { type: Router }
];
DashCardComponent.propDecorators = {
    title: [{ type: Input }],
    height: [{ type: Input }],
    description: [{ type: Input }],
    reportLink: [{ type: Input }],
    content: [{ type: Input }]
};

class UploadFileProgressComponent {
    constructor() {
        this.name = '';
        this.onUploadFlag = false;
        this.uploadPercentage = 0;
    }
    ngOnInit() {
    }
}
UploadFileProgressComponent.decorators = [
    { type: Component, args: [{
                selector: 'smartstock-upload-file-progress',
                template: `
    <div *ngIf="onUploadFlag">
      <mat-progress-bar [bufferValue]="100" mode="determinate" [value]="uploadPercentage"></mat-progress-bar>
      <span>{{name}} {{uploadPercentage}}%</span>
    </div>
  `
            },] }
];
UploadFileProgressComponent.ctorParameters = () => [];
UploadFileProgressComponent.propDecorators = {
    name: [{ type: Input }],
    onUploadFlag: [{ type: Input }],
    uploadPercentage: [{ type: Input }]
};

class DialogDeleteComponent {
    constructor(dialogRef, data) {
        this.dialogRef = dialogRef;
        this.data = data;
    }
    delete(stock) {
        this.dialogRef.close(stock);
    }
    cancel() {
        this.dialogRef.close('no');
    }
}
DialogDeleteComponent.decorators = [
    { type: Component, args: [{
                selector: 'smartstock-lisb-dialog-delete',
                template: `
    <div class="container">
      <div class="row">
        <div class="col-12">
          <mat-panel-title class="text-center">
            Your about to delete :  <b>{{' '+ data.product}}</b>
          </mat-panel-title>
        </div>
      </div>
      <div class="d-flex justify-content-center">
        <div class="align-self-center" style="margin: 8px">
          <button color="primary"  mat-button (click)="delete(data)">Delete</button>
        </div>
        <div class="alert-secondary" style="margin: 8px">
          <button color="primary" mat-button (click)="cancel()">Cancel</button>
        </div>
      </div>
    </div>
  `
            },] }
];
DialogDeleteComponent.ctorParameters = () => [
    { type: MatDialogRef },
    { type: undefined, decorators: [{ type: Inject, args: [MAT_DIALOG_DATA,] }] }
];

class LibModule {
    static start(config = { version: '' }) {
        ConfigsService.versionName = config.version;
    }
}
LibModule.decorators = [
    { type: NgModule, args: [{
                imports: [
                    CommonModule,
                    MatProgressSpinnerModule,
                    MatCardModule,
                    MatExpansionModule,
                    MatDividerModule,
                    MatListModule,
                    MatProgressBarModule,
                    MatToolbarModule,
                    MatIconModule,
                    MatMenuModule,
                    MatButtonModule,
                    RouterModule,
                    MatFormFieldModule,
                    ReactiveFormsModule,
                    MatDialogModule,
                    MatSelectModule,
                    MatBadgeModule,
                    MatTooltipModule,
                    MatRippleModule
                ],
                exports: [
                    DrawerComponent,
                    ToolbarComponent,
                    ShopsPipe,
                    OnFetchComponent,
                    BottomBarComponent,
                    DataNotReadyComponent,
                    UploadFilesComponent,
                    DashCardComponent,
                    UploadFileProgressComponent
                ],
                declarations: [
                    DrawerComponent,
                    ToolbarComponent,
                    NoStockDialogComponent,
                    ShopsPipe,
                    OnFetchComponent,
                    SearchInputComponent,
                    BottomBarComponent,
                    DataNotReadyComponent,
                    UploadFilesComponent,
                    DashCardComponent,
                    DialogDeleteComponent,
                    UploadFileProgressComponent,
                    VerifyEMailDialogComponent
                ]
            },] }
];

class FileLibraryService {
    constructor(storageService) {
        this.storageService = storageService;
    }
    saveFile(file, progress) {
        return __awaiter(this, void 0, void 0, function* () {
            if (file && file instanceof File) {
                const activeShop = yield this.storageService.getActiveShop();
                return BFast.storage(activeShop === null || activeShop === void 0 ? void 0 : activeShop.projectId).save(file, (data) => {
                    progress((Number(data.loaded) / Number(data.total) * 100));
                });
            }
            else if (file && typeof file === 'string' && file.startsWith('http')) {
                return file;
            }
            else {
                return null;
            }
        });
    }
}
FileLibraryService.ɵprov = ɵɵdefineInjectable({ factory: function FileLibraryService_Factory() { return new FileLibraryService(ɵɵinject(StorageService)); }, token: FileLibraryService, providedIn: "any" });
FileLibraryService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'any'
            },] }
];
FileLibraryService.ctorParameters = () => [
    { type: StorageService }
];

class MessageService {
    constructor(matSnackBar) {
        this.matSnackBar = matSnackBar;
    }
    showMobileInfoMessage(message, duration = 3000, position = 'top') {
        this.matSnackBar.open(message, 'Ok', {
            horizontalPosition: 'center',
            verticalPosition: position,
            duration
        });
    }
}
MessageService.ɵprov = ɵɵdefineInjectable({ factory: function MessageService_Factory() { return new MessageService(ɵɵinject(MatSnackBar)); }, token: MessageService, providedIn: "root" });
MessageService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root'
            },] }
];
MessageService.ctorParameters = () => [
    { type: MatSnackBar }
];

const toSqlDate = (date) => {
    const year = date.getFullYear();
    let month = (date.getMonth() + 1).toString(10);
    let day = (date.getDate()).toString(10);
    if (month.length === 1) {
        month = '0' + month;
    }
    if (day.length === 1) {
        day = '0' + day;
    }
    return year + '-' + month + '-' + day;
};

class DeviceInfoUtil {
    getWidth() {
        return window.innerWidth;
    }
    enoughWidth() {
        const width = this.getWidth();
        return width > 1000;
    }
    openDrawer(sidenav) {
        sidenav.open().catch();
    }
}

/*
 * Public API Surface of libs
 */

/**
 * Generated bundle index. Do not edit.
 */

export { DeviceInfoUtil, EventService, FileLibraryService, LibModule, LogService, MessageService, NoStockDialogComponent, SecurityUtil, SettingsService, SsmEvents, StorageService, UserService, toSqlDate, DrawerComponent as ɵa, ToolbarComponent as ɵb, ShopsPipe as ɵc, OnFetchComponent as ɵd, BottomBarComponent as ɵe, DataNotReadyComponent as ɵf, UploadFilesComponent as ɵg, DashCardComponent as ɵh, UploadFileProgressComponent as ɵi, SearchInputComponent as ɵj, DialogDeleteComponent as ɵk, VerifyEMailDialogComponent as ɵm };
//# sourceMappingURL=smartstock-core-libs.js.map
