import { __awaiter } from "tslib";
import { Injectable } from '@angular/core';
import { MatDialog } from '@angular/material/dialog';
import { HttpClient } from '@angular/common/http';
import { BFast } from 'bfastjs';
import { LogService } from './log.service';
import { StorageService } from './storage.service';
import { SettingsService } from './settings.service';
import { VerifyEMailDialogComponent } from '../components/verify-email-dialog.component';
import * as i0 from "@angular/core";
import * as i1 from "@angular/common/http";
import * as i2 from "./settings.service";
import * as i3 from "@angular/material/dialog";
import * as i4 from "./log.service";
import * as i5 from "./storage.service";
export class UserService {
    constructor(httpClient, settingsService, dialog, logger, storageService) {
        this.httpClient = httpClient;
        this.settingsService = settingsService;
        this.dialog = dialog;
        this.logger = logger;
        this.storageService = storageService;
    }
    currentUser() {
        return __awaiter(this, void 0, void 0, function* () {
            const user = yield BFast.auth().currentUser();
            if (user && user.role !== 'admin') {
                return user;
            }
            else if (user && user.verified === true) {
                return user;
            }
            else {
                return yield BFast.auth().setCurrentUser(undefined);
            }
        });
    }
    deleteUser(user) {
        return __awaiter(this, void 0, void 0, function* () {
            return BFast.functions()
                .request('/functions/users/' + user.id)
                .delete({
                data: { context: { admin: yield BFast.auth().currentUser() } }
            });
        });
    }
    getAllUser(pagination) {
        return __awaiter(this, void 0, void 0, function* () {
            const projectId = yield this.settingsService.getCustomerProjectId();
            return BFast.database().collection('_User')
                .query()
                .equalTo('projectId', projectId)
                .includesIn('role', ['user', 'manager'])
                .size(pagination.size)
                .skip(pagination.skip)
                .find({
                useMasterKey: true
            });
        });
    }
    getUser(user, callback) {
    }
    login(user) {
        return __awaiter(this, void 0, void 0, function* () {
            const authUser = yield BFast.auth().logIn(user.username, user.password);
            yield this.storageService.removeActiveShop();
            if (authUser && authUser.role !== 'admin') {
                yield this.storageService.saveActiveUser(authUser);
                return authUser;
            }
            else if (authUser && authUser.verified === true) {
                yield this.storageService.saveActiveUser(authUser);
                return authUser;
            }
            else {
                yield BFast.functions().request('/functions/users/reVerifyAccount/' + user.username).post();
                this.dialog.open(VerifyEMailDialogComponent, {
                    closeOnNavigation: true,
                    disableClose: true
                });
                throw { code: 403, err: 'account not verified' };
            }
        });
    }
    logout(user) {
        return __awaiter(this, void 0, void 0, function* () {
            yield BFast.auth().logOut();
            yield this.storageService.removeActiveUser();
            yield this.storageService.removeActiveShop();
            return;
        });
    }
    register(user) {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                user.settings = {
                    printerFooter: 'Thank you',
                    printerHeader: '',
                    saleWithoutPrinter: true,
                    allowRetail: true,
                    allowWholesale: true
                };
                user.shops = [];
                yield this.storageService.removeActiveShop();
                return yield BFast.functions().request('/functions/users/create').post(user, {
                    headers: this.settingsService.ssmFunctionsHeader
                });
            }
            catch (e) {
                if (e && e.response && e.response.data) {
                    throw e.response.data;
                }
                else {
                    throw e.toString();
                }
            }
        });
    }
    resetPassword(username) {
        return BFast.functions().request('/functions/users/resetPassword/' + encodeURIComponent(username)).get();
    }
    refreshToken() {
        return __awaiter(this, void 0, void 0, function* () {
            return BFast.auth().currentUser();
        });
    }
    addUser(user) {
        return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            const shop = yield this.storageService.getActiveShop();
            const shops = user.shops ? user.shops : [];
            const shops1 = shops.filter(value => value.applicationId !== shop.applicationId);
            user.applicationId = shop.applicationId;
            user.projectUrlId = shop.projectUrlId;
            user.projectId = shop.projectId;
            user.businessName = shop.businessName;
            user.settings = shop.settings;
            user.shops = shops1;
            this.httpClient.post(this.settingsService.ssmFunctionsURL + '/functions/users/seller', user, {
                headers: this.settingsService.ssmFunctionsHeader
            }).subscribe(value => {
                resolve(value);
            }, error => {
                reject(error);
            });
        }));
    }
    getShops() {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                const user = yield this.storageService.getActiveUser();
                const shops = [];
                user.shops.forEach(element => {
                    shops.push(element);
                });
                shops.push({
                    businessName: user.businessName,
                    projectId: user.projectId,
                    applicationId: user.applicationId,
                    projectUrlId: user.projectUrlId,
                    settings: user.settings,
                    street: user.street,
                    country: user.country,
                    region: user.region
                });
                return shops;
            }
            catch (e) {
                throw e;
            }
        });
    }
    getCurrentShop() {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                const activeShop = yield this.storageService.getActiveShop();
                if (activeShop && activeShop.projectId && activeShop.applicationId && activeShop.projectUrlId) {
                    return activeShop;
                }
                else {
                    throw new Error('No active shop in records');
                }
            }
            catch (e) {
                throw e;
            }
        });
    }
    saveCurrentShop(shop) {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                yield this.storageService.saveCurrentProjectId(shop.projectId);
                return yield this.storageService.saveActiveShop(shop);
            }
            catch (e) {
                throw e;
            }
        });
    }
    createShop(data) {
        return undefined;
        // return new Promise<ShopModel>(async (resolve, reject) => {
        //   this.httpClient.post<ShopModel>(this.settings.ssmFunctionsURL + '/functions/shop', data, {
        //     headers: this.settings.ssmFunctionsHeader
        //   }).subscribe(value => {
        //     resolve(value);
        //   }, error => {
        //     reject(error);
        //   });
        // });
    }
    deleteShop(shop) {
        return undefined;
        // return new Promise<ShopModel>((resolve, reject) => {
        //   this.httpClient.delete(this.settings.ssmFunctionsURL + '/functions/shop', {
        //   })
        // });
    }
    updatePassword(user, password) {
        return new Promise((resolve, reject) => {
            this.httpClient.put(this.settingsService.ssmFunctionsURL + '/functions/users/password/' + user.id, {
                password: password
            }, {
                headers: this.settingsService.ssmFunctionsHeader
            }).subscribe(value => {
                resolve(value);
            }, error => {
                reject(error);
            });
        });
    }
    updateUser(user, data) {
        return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            this.httpClient.put(this.settingsService.ssmFunctionsURL + '/functions/users/' + user.id, data, {
                headers: this.settingsService.ssmFunctionsHeader
            }).subscribe(value => resolve(value), error1 => {
                reject(error1);
            });
        }));
    }
    updateCurrentUser(user) {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                return yield this.storageService.saveActiveUser(user);
            }
            catch (e) {
                throw e;
            }
        });
    }
    changePasswordFromOld(data) {
        return new Promise((resolve, reject) => {
            this.httpClient.put(this.settingsService.ssmFunctionsURL + '/functions/users/password/change/' + data.user.id, {
                lastPassword: data.lastPassword,
                username: data.user.username,
                password: data.password
            }, {
                headers: this.settingsService.ssmFunctionsHeader
            }).subscribe(value => resolve(value), error1 => {
                reject(error1);
            });
        });
    }
}
UserService.ɵprov = i0.ɵɵdefineInjectable({ factory: function UserService_Factory() { return new UserService(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.SettingsService), i0.ɵɵinject(i3.MatDialog), i0.ɵɵinject(i4.LogService), i0.ɵɵinject(i5.StorageService)); }, token: UserService, providedIn: "root" });
UserService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root'
            },] }
];
UserService.ctorParameters = () => [
    { type: HttpClient },
    { type: SettingsService },
    { type: MatDialog },
    { type: LogService },
    { type: StorageService }
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXNlci5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6Ii9Vc2Vycy93YXBwaS9XZWJTdG9ybVByb2plY3RzL3NtYXJ0c3RvY2stY29yZS1saWJzL3Byb2plY3RzL2xpYnMvc3JjLyIsInNvdXJjZXMiOlsic2VydmljZXMvdXNlci5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUMsVUFBVSxFQUFDLE1BQU0sZUFBZSxDQUFDO0FBQ3pDLE9BQU8sRUFBQyxTQUFTLEVBQUMsTUFBTSwwQkFBMEIsQ0FBQztBQUNuRCxPQUFPLEVBQUMsVUFBVSxFQUFDLE1BQU0sc0JBQXNCLENBQUM7QUFDaEQsT0FBTyxFQUFDLEtBQUssRUFBQyxNQUFNLFNBQVMsQ0FBQztBQUM5QixPQUFPLEVBQUMsVUFBVSxFQUFDLE1BQU0sZUFBZSxDQUFDO0FBQ3pDLE9BQU8sRUFBQyxjQUFjLEVBQUMsTUFBTSxtQkFBbUIsQ0FBQztBQUdqRCxPQUFPLEVBQUMsZUFBZSxFQUFDLE1BQU0sb0JBQW9CLENBQUM7QUFDbkQsT0FBTyxFQUFDLDBCQUEwQixFQUFDLE1BQU0sNkNBQTZDLENBQUM7Ozs7Ozs7QUFNdkYsTUFBTSxPQUFPLFdBQVc7SUFHdEIsWUFBNkIsVUFBc0IsRUFDdEIsZUFBZ0MsRUFDaEMsTUFBaUIsRUFDakIsTUFBa0IsRUFDbEIsY0FBOEI7UUFKOUIsZUFBVSxHQUFWLFVBQVUsQ0FBWTtRQUN0QixvQkFBZSxHQUFmLGVBQWUsQ0FBaUI7UUFDaEMsV0FBTSxHQUFOLE1BQU0sQ0FBVztRQUNqQixXQUFNLEdBQU4sTUFBTSxDQUFZO1FBQ2xCLG1CQUFjLEdBQWQsY0FBYyxDQUFnQjtJQUMzRCxDQUFDO0lBRUssV0FBVzs7WUFDZixNQUFNLElBQUksR0FBRyxNQUFNLEtBQUssQ0FBQyxJQUFJLEVBQUUsQ0FBQyxXQUFXLEVBQUUsQ0FBQztZQUM5QyxJQUFJLElBQUksSUFBSSxJQUFJLENBQUMsSUFBSSxLQUFLLE9BQU8sRUFBRTtnQkFDakMsT0FB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RSxJQUFJLENBQUMsUUFBUTthQUN4QixFQUFFO2dCQUNELE9BQU8sRUFBRSxJQUFJLENBQUMsZUFBZSxDQUFDLGtCQUFrQjthQUNqRCxDQUFDLENBQUMsU0FBUyxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxFQUFFLE1BQU0sQ0FBQyxFQUFFO2dCQUM3QyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUM7WUFDakIsQ0FBQyxDQUFDLENBQUM7UUFDTCxDQUFDLENBQUMsQ0FBQztJQUNMLENBQUM7Ozs7WUE3T0YsVUFBVSxTQUFDO2dCQUNWLFVBQVUsRUFBRSxNQUFNO2FBQ25COzs7WUFaTyxVQUFVO1lBTVYsZUFBZTtZQVBmLFNBQVM7WUFHVCxVQUFVO1lBQ1YsY0FBYyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7SW5qZWN0YWJsZX0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQge01hdERpYWxvZ30gZnJvbSAnQGFuZ3VsYXIvbWF0ZXJpYWwvZGlhbG9nJztcbmltcG9ydCB7SHR0cENsaWVudH0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uL2h0dHAnO1xuaW1wb3J0IHtCRmFzdH0gZnJvbSAnYmZhc3Rqcyc7XG5pbXBvcnQge0xvZ1NlcnZpY2V9IGZyb20gJy4vbG9nLnNlcnZpY2UnO1xuaW1wb3J0IHtTdG9yYWdlU2VydmljZX0gZnJvbSAnLi9zdG9yYWdlLnNlcnZpY2UnO1xuaW1wb3J0IHtTaG9wTW9kZWx9IGZyb20gJy4uL21vZGVscy9zaG9wLm1vZGVsJztcbmltcG9ydCB7VXNlck1vZGVsfSBmcm9tICcuLi9tb2RlbHMvdXNlci5tb2RlbCc7XG5pbXBvcnQge1NldHRpbmdzU2VydmljZX0gZnJvbSAnLi9zZXR0aW5ncy5zZXJ2aWNlJztcbmltcG9ydCB7VmVyaWZ5RU1haWxEaWFsb2dDb21wb25lbnR9IGZyb20gJy4uL2NvbXBvbmVudHMvdmVyaWZ5LWVtYWlsLWRpYWxvZy5jb21wb25lbnQnO1xuXG5cbkBJbmplY3RhYmxlKHtcbiAgcHJvdmlkZWRJbjogJ3Jvb3QnXG59KVxuZXhwb3J0IGNsYXNzIFVzZXJTZXJ2aWNlIHtcblxuXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgcmVhZG9ubHkgaHR0cENsaWVudDogSHR0cENsaWVudCxcbiAgICAgICAgICAgICAgcHJpdmF0ZSByZWFkb25seSBzZXR0aW5nc1NlcnZpY2U6IFNldHRpbmdzU2VydmljZSxcbiAgICAgICAgICAgICAgcHJpdmF0ZSByZWFkb25seSBkaWFsb2c6IE1hdERpYWxvZyxcbiAgICAgICAgICAgICAgcHJpdmF0ZSByZWFkb25seSBsb2dnZXI6IExvZ1NlcnZpY2UsXG4gICAgICAgICAgICAgIHByaXZhdGUgcmVhZG9ubHkgc3RvcmFnZVNlcnZpY2U6IFN0b3JhZ2VTZXJ2aWNlKSB7XG4gIH1cblxuICBhc3luYyBjdXJyZW50VXNlcigpOiBQcm9taXNlPGFueT4ge1xuICAgIGNvbnN0IHVzZXIgPSBhd2FpdCBCRmFzdC5hdXRoKCkuY3VycmVudFVzZXIoKTtcbiAgICBpZiAodXNlciAmJiB1c2VyLnJvbGUgIT09ICdhZG1pbicpIHtcbiAgICAgIHJldHVybiB1c2VyO1xuICAgIH0gZWxzZSBpZiAodXNlciAmJiB1c2VyLnZlcmlmaWVkID09PSB0cnVlKSB7XG4gICAgICByZXR1cm4gdXNlcjtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIGF3YWl0IEJGYXN0LmF1dGgoKS5zZXRDdXJyZW50VXNlcih1bmRlZmluZWQpO1xuICAgIH1cbiAgfVxuXG4gIGFzeW5jIGRlbGV0ZVVzZXIodXNlcjogYW55KTogUHJvbWlzZTxhbnk+IHtcbiAgICByZXR1cm4gQkZhc3QuZnVuY3Rpb25zKClcbiAgICAgIC5yZXF1ZXN0KCcvZnVuY3Rpb25zL3VzZXJzLycgKyB1c2VyLmlkKVxuICAgICAgLmRlbGV0ZSh7XG4gICAgICAgIGRhdGE6IHtjb250ZXh0OiB7YWRtaW46IGF3YWl0IEJGYXN0LmF1dGgoKS5jdXJyZW50VXNlcigpfX1cbiAgICAgIH0pO1xuICB9XG5cbiAgYXN5bmMgZ2V0QWxsVXNlcihwYWdpbmF0aW9uOiB7IHNpemU6IG51bWJlciwgc2tpcDogbnVtYmVyIH0pOiBQcm9taXNlPFVzZXJNb2RlbFtdPiB7XG4gICAgY29uc3QgcHJvamVjdElkID0gYXdhaXQgdGhpcy5zZXR0aW5nc1NlcnZpY2UuZ2V0Q3VzdG9tZXJQcm9qZWN0SWQoKTtcbiAgICByZXR1cm4gQkZhc3QuZGF0YWJhc2UoKS5jb2xsZWN0aW9uKCdfVXNlcicpXG4gICAgICAucXVlcnkoKVxuICAgICAgLmVxdWFsVG8oJ3Byb2plY3RJZCcsIHByb2plY3RJZClcbiAgICAgIC5pbmNsdWRlc0luKCdyb2xlJywgWyd1c2VyJywgJ21hbmFnZXInXSlcbiAgICAgIC5zaXplKHBhZ2luYXRpb24uc2l6ZSlcbiAgICAgIC5za2lwKHBhZ2luYXRpb24uc2tpcClcbiAgICAgIC5maW5kPFVzZXJNb2RlbFtdPih7XG4gICAgICAgIHVzZU1hc3RlcktleTogdHJ1ZVxuICAgICAgfSk7XG4gIH1cblxuICBnZXRVc2VyKHVzZXI6IFVzZXJNb2RlbCwgY2FsbGJhY2s/OiAodXNlcjogVXNlck1vZGVsKSA9PiB2b2lkKTogdm9pZCB7XG5cbiAgfVxuXG4gIGFzeW5jIGxvZ2luKHVzZXI6IHsgdXNlcm5hbWU6IHN0cmluZywgcGFzc3dvcmQ6IHN0cmluZyB9KTogUHJvbWlzZTxVc2VyTW9kZWw+IHtcbiAgICBjb25zdCBhdXRoVXNlciA9IGF3YWl0IEJGYXN0LmF1dGgoKS5sb2dJbjxVc2VyTW9kZWw+KHVzZXIudXNlcm5hbWUsIHVzZXIucGFzc3dvcmQpO1xuICAgIGF3YWl0IHRoaXMuc3RvcmFnZVNlcnZpY2UucmVtb3ZlQWN0aXZlU2hvcCgpO1xuICAgIGlmIChhdXRoVXNlciAmJiBhdXRoVXNlci5yb2xlICE9PSAnYWRtaW4nKSB7XG4gICAgICBhd2FpdCB0aGlzLnN0b3JhZ2VTZXJ2aWNlLnNhdmVBY3RpdmVVc2VyKGF1dGhVc2VyKTtcbiAgICAgIHJldHVybiBhdXRoVXNlcjtcbiAgICB9IGVsc2UgaWYgKGF1dGhVc2VyICYmIGF1dGhVc2VyLnZlcmlmaWVkID09PSB0cnVlKSB7XG4gICAgICBhd2FpdCB0aGlzLnN0b3JhZ2VTZXJ2aWNlLnNhdmVBY3RpdmVVc2VyKGF1dGhVc2VyKTtcbiAgICAgIHJldHVybiBhdXRoVXNlcjtcbiAgICB9IGVsc2Uge1xuICAgICAgYXdhaXQgQkZhc3QuZnVuY3Rpb25zKCkucmVxdWVzdCgnL2Z1bmN0aW9ucy91c2Vycy9yZVZlcmlmeUFjY291bnQvJyArIHVzZXIudXNlcm5hbWUpLnBvc3QoKTtcbiAgICAgIHRoaXMuZGlhbG9nLm9wZW4oVmVyaWZ5RU1haWxEaWFsb2dDb21wb25lbnQsIHtcbiAgICAgICAgY2xvc2VPbk5hdmlnYXRpb246IHRydWUsXG4gICAgICAgIGRpc2FibGVDbG9zZTogdHJ1ZVxuICAgICAgfSk7XG4gICAgICB0aHJvdyB7Y29kZTogNDAzLCBlcnI6ICdhY2NvdW50IG5vdCB2ZXJpZmllZCd9O1xuICAgIH1cbiAgfVxuXG4gIGFzeW5jIGxvZ291dCh1c2VyOiBVc2VyTW9kZWwpIHtcbiAgICBhd2FpdCBCRmFzdC5hdXRoKCkubG9nT3V0KCk7XG4gICAgYXdhaXQgdGhpcy5zdG9yYWdlU2VydmljZS5yZW1vdmVBY3RpdmVVc2VyKCk7XG4gICAgYXdhaXQgdGhpcy5zdG9yYWdlU2VydmljZS5yZW1vdmVBY3RpdmVTaG9wKCk7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgYXN5bmMgcmVnaXN0ZXIodXNlcjogVXNlck1vZGVsKTogUHJvbWlzZTxVc2VyTW9kZWw+IHtcbiAgICB0cnkge1xuICAgICAgdXNlci5zZXR0aW5ncyA9IHtcbiAgICAgICAgcHJpbnRlckZvb3RlcjogJ1RoYW5rIHlvdScsXG4gICAgICAgIHByaW50ZXJIZWFkZXI6ICcnLFxuICAgICAgICBzYWxlV2l0aG91dFByaW50ZXI6IHRydWUsXG4gICAgICAgIGFsbG93UmV0YWlsOiB0cnVlLFxuICAgICAgICBhbGxvd1dob2xlc2FsZTogdHJ1ZVxuICAgICAgfTtcbiAgICAgIHVzZXIuc2hvcHMgPSBbXTtcbiAgICAgIGF3YWl0IHRoaXMuc3RvcmFnZVNlcnZpY2UucmVtb3ZlQWN0aXZlU2hvcCgpO1xuICAgICAgcmV0dXJuIGF3YWl0IEJGYXN0LmZ1bmN0aW9ucygpLnJlcXVlc3QoJy9mdW5jdGlvbnMvdXNlcnMvY3JlYXRlJykucG9zdCh1c2VyLCB7XG4gICAgICAgIGhlYWRlcnM6IHRoaXMuc2V0dGluZ3NTZXJ2aWNlLnNzbUZ1bmN0aW9uc0hlYWRlclxuICAgICAgfSk7XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgaWYgKGUgJiYgZS5yZXNwb25zZSAmJiBlLnJlc3BvbnNlLmRhdGEpIHtcbiAgICAgICAgdGhyb3cgZS5yZXNwb25zZS5kYXRhO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhyb3cgZS50b1N0cmluZygpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHJlc2V0UGFzc3dvcmQodXNlcm5hbWU6IHN0cmluZyk6IFByb21pc2U8YW55PiB7XG4gICAgcmV0dXJuIEJGYXN0LmZ1bmN0aW9ucygpLnJlcXVlc3QoJy9mdW5jdGlvbnMvdXNlcnMvcmVzZXRQYXNzd29yZC8nICsgZW5jb2RlVVJJQ29tcG9uZW50KHVzZXJuYW1lKSkuZ2V0KCk7XG4gIH1cblxuICBhc3luYyByZWZyZXNoVG9rZW4oKTogUHJvbWlzZTxhbnk+IHtcbiAgICByZXR1cm4gQkZhc3QuYXV0aCgpLmN1cnJlbnRVc2VyKCk7XG4gIH1cblxuICBhZGRVc2VyKHVzZXI6IFVzZXJNb2RlbCk6IFByb21pc2U8VXNlck1vZGVsPiB7XG4gICAgcmV0dXJuIG5ldyBQcm9taXNlPFVzZXJNb2RlbD4oYXN5bmMgKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgY29uc3Qgc2hvcCA9IGF3YWl0IHRoaXMuc3RvcmFnZVNlcnZpY2UuZ2V0QWN0aXZlU2hvcCgpO1xuICAgICAgY29uc3Qgc2hvcHMgPSB1c2VyLnNob3BzID8gdXNlci5zaG9wcyA6IFtdO1xuICAgICAgY29uc3Qgc2hvcHMxID0gc2hvcHMuZmlsdGVyKHZhbHVlID0+IHZhbHVlLmFwcGxpY2F0aW9uSWQgIT09IHNob3AuYXBwbGljYXRpb25JZCk7XG4gICAgICB1c2VyLmFwcGxpY2F0aW9uSWQgPSBzaG9wLmFwcGxpY2F0aW9uSWQ7XG4gICAgICB1c2VyLnByb2plY3RVcmxJZCA9IHNob3AucHJvamVjdFVybElkO1xuICAgICAgdXNlci5wcm9qZWN0SWQgPSBzaG9wLnByb2plY3RJZDtcbiAgICAgIHVzZXIuYnVzaW5lc3NOYW1lID0gc2hvcC5idXNpbmVzc05hbWU7XG4gICAgICB1c2VyLnNldHRpbmdzID0gc2hvcC5zZXR0aW5ncztcbiAgICAgIHVzZXIuc2hvcHMgPSBzaG9wczE7XG4gICAgICB0aGlzLmh0dHBDbGllbnQucG9zdDxVc2VyTW9kZWw+KHRoaXMuc2V0dGluZ3NTZXJ2aWNlLnNzbUZ1bmN0aW9uc1VSTCArICcvZnVuY3Rpb25zL3VzZXJzL3NlbGxlcicsIHVzZXIsIHtcbiAgICAgICAgaGVhZGVyczogdGhpcy5zZXR0aW5nc1NlcnZpY2Uuc3NtRnVuY3Rpb25zSGVhZGVyXG4gICAgICB9KS5zdWJzY3JpYmUodmFsdWUgPT4ge1xuICAgICAgICByZXNvbHZlKHZhbHVlKTtcbiAgICAgIH0sIGVycm9yID0+IHtcbiAgICAgICAgcmVqZWN0KGVycm9yKTtcbiAgICAgIH0pO1xuICAgIH0pO1xuICB9XG5cbiAgYXN5bmMgZ2V0U2hvcHMoKTogUHJvbWlzZTxTaG9wTW9kZWxbXT4ge1xuICAgIHRyeSB7XG4gICAgICBjb25zdCB1c2VyID0gYXdhaXQgdGhpcy5zdG9yYWdlU2VydmljZS5nZXRBY3RpdmVVc2VyKCk7XG4gICAgICBjb25zdCBzaG9wcyA9IFtdO1xuICAgICAgdXNlci5zaG9wcy5mb3JFYWNoKGVsZW1lbnQgPT4ge1xuICAgICAgICBzaG9wcy5wdXNoKGVsZW1lbnQpO1xuICAgICAgfSk7XG4gICAgICBzaG9wcy5wdXNoKHtcbiAgICAgICAgYnVzaW5lc3NOYW1lOiB1c2VyLmJ1c2luZXNzTmFtZSxcbiAgICAgICAgcHJvamVjdElkOiB1c2VyLnByb2plY3RJZCxcbiAgICAgICAgYXBwbGljYXRpb25JZDogdXNlci5hcHBsaWNhdGlvbklkLFxuICAgICAgICBwcm9qZWN0VXJsSWQ6IHVzZXIucHJvamVjdFVybElkLFxuICAgICAgICBzZXR0aW5nczogdXNlci5zZXR0aW5ncyxcbiAgICAgICAgc3RyZWV0OiB1c2VyLnN0cmVldCxcbiAgICAgICAgY291bnRyeTogdXNlci5jb3VudHJ5LFxuICAgICAgICByZWdpb246IHVzZXIucmVnaW9uXG4gICAgICB9KTtcbiAgICAgIHJldHVybiBzaG9wcztcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICB0aHJvdyBlO1xuICAgIH1cbiAgfVxuXG4gIGFzeW5jIGdldEN1cnJlbnRTaG9wKCk6IFByb21pc2U8U2hvcE1vZGVsPiB7XG4gICAgdHJ5IHtcbiAgICAgIGNvbnN0IGFjdGl2ZVNob3AgPSBhd2FpdCB0aGlzLnN0b3JhZ2VTZXJ2aWNlLmdldEFjdGl2ZVNob3AoKTtcbiAgICAgIGlmIChhY3RpdmVTaG9wICYmIGFjdGl2ZVNob3AucHJvamVjdElkICYmIGFjdGl2ZVNob3AuYXBwbGljYXRpb25JZCAmJiBhY3RpdmVTaG9wLnByb2plY3RVcmxJZCkge1xuICAgICAgICByZXR1cm4gYWN0aXZlU2hvcDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignTm8gYWN0aXZlIHNob3AgaW4gcmVjb3JkcycpO1xuICAgICAgfVxuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIHRocm93IGU7XG4gICAgfVxuICB9XG5cbiAgYXN5bmMgc2F2ZUN1cnJlbnRTaG9wKHNob3A6IFNob3BNb2RlbCk6IFByb21pc2U8U2hvcE1vZGVsPiB7XG4gICAgdHJ5IHtcbiAgICAgIGF3YWl0IHRoaXMuc3RvcmFnZVNlcnZpY2Uuc2F2ZUN1cnJlbnRQcm9qZWN0SWQoc2hvcC5wcm9qZWN0SWQpO1xuICAgICAgcmV0dXJuIGF3YWl0IHRoaXMuc3RvcmFnZVNlcnZpY2Uuc2F2ZUFjdGl2ZVNob3Aoc2hvcCk7XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgdGhyb3cgZTtcbiAgICB9XG4gIH1cblxuICBjcmVhdGVTaG9wKGRhdGE6IHsgYWRtaW46IFVzZXJNb2RlbCwgc2hvcDogU2hvcE1vZGVsIH0pOiBQcm9taXNlPFNob3BNb2RlbD4ge1xuICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgLy8gcmV0dXJuIG5ldyBQcm9taXNlPFNob3BNb2RlbD4oYXN5bmMgKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgIC8vICAgdGhpcy5odHRwQ2xpZW50LnBvc3Q8U2hvcE1vZGVsPih0aGlzLnNldHRpbmdzLnNzbUZ1bmN0aW9uc1VSTCArICcvZnVuY3Rpb25zL3Nob3AnLCBkYXRhLCB7XG4gICAgLy8gICAgIGhlYWRlcnM6IHRoaXMuc2V0dGluZ3Muc3NtRnVuY3Rpb25zSGVhZGVyXG4gICAgLy8gICB9KS5zdWJzY3JpYmUodmFsdWUgPT4ge1xuICAgIC8vICAgICByZXNvbHZlKHZhbHVlKTtcbiAgICAvLyAgIH0sIGVycm9yID0+IHtcbiAgICAvLyAgICAgcmVqZWN0KGVycm9yKTtcbiAgICAvLyAgIH0pO1xuICAgIC8vIH0pO1xuICB9XG5cbiAgZGVsZXRlU2hvcChzaG9wOiBTaG9wTW9kZWwpOiBQcm9taXNlPFNob3BNb2RlbD4ge1xuICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgLy8gcmV0dXJuIG5ldyBQcm9taXNlPFNob3BNb2RlbD4oKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgIC8vICAgdGhpcy5odHRwQ2xpZW50LmRlbGV0ZSh0aGlzLnNldHRpbmdzLnNzbUZ1bmN0aW9uc1VSTCArICcvZnVuY3Rpb25zL3Nob3AnLCB7XG4gICAgLy8gICB9KVxuICAgIC8vIH0pO1xuICB9XG5cbiAgdXBkYXRlUGFzc3dvcmQodXNlcjogVXNlck1vZGVsLCBwYXNzd29yZDogc3RyaW5nKTogUHJvbWlzZTxhbnk+IHtcbiAgICByZXR1cm4gbmV3IFByb21pc2U8VXNlck1vZGVsPigocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICB0aGlzLmh0dHBDbGllbnQucHV0PGFueT4odGhpcy5zZXR0aW5nc1NlcnZpY2Uuc3NtRnVuY3Rpb25zVVJMICsgJy9mdW5jdGlvbnMvdXNlcnMvcGFzc3dvcmQvJyArIHVzZXIuaWQsIHtcbiAgICAgICAgcGFzc3dvcmQ6IHBhc3N3b3JkXG4gICAgICB9LCB7XG4gICAgICAgIGhlYWRlcnM6IHRoaXMuc2V0dGluZ3NTZXJ2aWNlLnNzbUZ1bmN0aW9uc0hlYWRlclxuICAgICAgfSkuc3Vic2NyaWJlKHZhbHVlID0+IHtcbiAgICAgICAgcmVzb2x2ZSh2YWx1ZSk7XG4gICAgICB9LCBlcnJvciA9PiB7XG4gICAgICAgIHJlamVjdChlcnJvcik7XG4gICAgICB9KTtcbiAgICB9KTtcbiAgfVxuXG4gIHVwZGF0ZVVzZXIodXNlcjogVXNlck1vZGVsLCBkYXRhOiB7IFtwOiBzdHJpbmddOiBhbnkgfSk6IFByb21pc2U8VXNlck1vZGVsPiB7XG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKGFzeW5jIChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgIHRoaXMuaHR0cENsaWVudC5wdXQ8VXNlck1vZGVsPih0aGlzLnNldHRpbmdzU2VydmljZS5zc21GdW5jdGlvbnNVUkwgKyAnL2Z1bmN0aW9ucy91c2Vycy8nICsgdXNlci5pZCwgZGF0YSwge1xuICAgICAgICBoZWFkZXJzOiB0aGlzLnNldHRpbmdzU2VydmljZS5zc21GdW5jdGlvbnNIZWFkZXJcbiAgICAgIH0pLnN1YnNjcmliZSh2YWx1ZSA9PiByZXNvbHZlKHZhbHVlKSwgZXJyb3IxID0+IHtcbiAgICAgICAgcmVqZWN0KGVycm9yMSk7XG4gICAgICB9KTtcbiAgICB9KTtcbiAgfVxuXG4gIGFzeW5jIHVwZGF0ZUN1cnJlbnRVc2VyKHVzZXI6IFVzZXJNb2RlbCk6IFByb21pc2U8VXNlck1vZGVsPiB7XG4gICAgdHJ5IHtcbiAgICAgIHJldHVybiBhd2FpdCB0aGlzLnN0b3JhZ2VTZXJ2aWNlLnNhdmVBY3RpdmVVc2VyKHVzZXIpO1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIHRocm93IGU7XG4gICAgfVxuICB9XG5cbiAgY2hhbmdlUGFzc3dvcmRGcm9tT2xkKGRhdGE6IHsgbGFzdFBhc3N3b3JkOiBzdHJpbmc7IHBhc3N3b3JkOiBzdHJpbmc7IHVzZXI6IFVzZXJNb2RlbCB9KTogUHJvbWlzZTxhbnk+IHtcbiAgICByZXR1cm4gbmV3IFByb21pc2U8YW55PigocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICB0aGlzLmh0dHBDbGllbnQucHV0PFVzZXJNb2RlbD4odGhpcy5zZXR0aW5nc1NlcnZpY2Uuc3NtRnVuY3Rpb25zVVJMICsgJy9mdW5jdGlvbnMvdXNlcnMvcGFzc3dvcmQvY2hhbmdlLycgKyBkYXRhLnVzZXIuaWQsIHtcbiAgICAgICAgbGFzdFBhc3N3b3JkOiBkYXRhLmxhc3RQYXNzd29yZCxcbiAgICAgICAgdXNlcm5hbWU6IGRhdGEudXNlci51c2VybmFtZSxcbiAgICAgICAgcGFzc3dvcmQ6IGRhdGEucGFzc3dvcmRcbiAgICAgIH0sIHtcbiAgICAgICAgaGVhZGVyczogdGhpcy5zZXR0aW5nc1NlcnZpY2Uuc3NtRnVuY3Rpb25zSGVhZGVyXG4gICAgICB9KS5zdWJzY3JpYmUodmFsdWUgPT4gcmVzb2x2ZSh2YWx1ZSksIGVycm9yMSA9PiB7XG4gICAgICAgIHJlamVjdChlcnJvcjEpO1xuICAgICAgfSk7XG4gICAgfSk7XG4gIH1cbn1cbiJdfQ==