import { __awaiter } from "tslib";
import { Injectable } from '@angular/core';
import { EventService } from './event.service';
import { BFast } from 'bfastjs';
import { SecurityUtil } from '../utils/security.util';
import { SsmEvents } from '../utils/eventsNames.util';
import * as i0 from "@angular/core";
import * as i1 from "./event.service";
export class StorageService {
    constructor(eventApi) {
        this.eventApi = eventApi;
        this.smartStockCache = BFast.cache({ database: 'smartstock', collection: 'config' });
    }
    getActiveUser() {
        return __awaiter(this, void 0, void 0, function* () {
            return yield BFast.auth().currentUser();
        });
    }
    saveSales(batchs) {
        return __awaiter(this, void 0, void 0, function* () {
            const activeShop = yield this.getActiveShop();
            yield BFast.cache({ database: 'sales', collection: activeShop.projectId })
                .set(SecurityUtil.randomString(12), batchs, {
                dtl: 720
            });
        });
    }
    getActiveShop() {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.smartStockCache.get('activeShop');
            if (response) {
                return response;
            }
            else {
                throw { message: 'No Active Shop' };
            }
        });
    }
    saveActiveShop(shop) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.smartStockCache.set('activeShop', shop, {
                dtl: 7
            });
            this.eventApi.broadcast(SsmEvents.ACTIVE_SHOP_SET);
            return response;
        });
    }
    getCurrentProjectId() {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.smartStockCache.get('cPID');
        });
    }
    saveCurrentProjectId(projectId) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.smartStockCache.set('cPID', projectId, {
                dtl: 7
            });
        });
    }
    clearSmartStockCache() {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.smartStockCache.clearAll();
        });
    }
    saveActiveUser(user) {
        return __awaiter(this, void 0, void 0, function* () {
            return BFast.auth().setCurrentUser(user, 6);
        });
    }
    removeActiveShop() {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.smartStockCache.set('activeShop', undefined);
            this.eventApi.broadcast(SsmEvents.ACTIVE_SHOP_REMOVE);
            return response;
        });
    }
    removeActiveUser() {
        return __awaiter(this, void 0, void 0, function* () {
            return yield BFast.auth().setCurrentUser(undefined, 0);
        });
    }
    removeStocks() {
        return __awaiter(this, void 0, void 0, function* () {
            const shop = yield this.getActiveShop();
            return yield BFast.cache({ database: 'stocks', collection: shop.projectId }).clearAll();
        });
    }
    getStocks() {
        return __awaiter(this, void 0, void 0, function* () {
            const shop = yield this.getActiveShop();
            const stocksCache = BFast.cache({ database: 'stocks', collection: shop.projectId });
            return yield stocksCache.get('all');
        });
    }
    saveStocks(stocks) {
        return __awaiter(this, void 0, void 0, function* () {
            const shop = yield this.getActiveShop();
            const stocksCache = BFast.cache({ database: 'stocks', collection: shop.projectId });
            return yield stocksCache.set('all', stocks, {
                dtl: 360
            });
        });
    }
    saveStock(stock) {
        return __awaiter(this, void 0, void 0, function* () {
            // const shop = await this.getActiveShop();
            // const stocksCache = BFast.cache({database: 'stocks', collection: shop.projectId});
            // return stocksCache.set(stock.id, stock);
            return undefined;
        });
    }
    getCustomers() {
        return __awaiter(this, void 0, void 0, function* () {
            const shop = yield this.getActiveShop();
            const customersCache = BFast.cache({ database: 'customers', collection: shop.projectId });
            const customersKey = yield customersCache.keys();
            const customers = [];
            for (const key of customersKey) {
                customers.push(yield customersCache.get(key));
            }
            return customers;
        });
    }
    saveCustomer(customer) {
        return __awaiter(this, void 0, void 0, function* () {
            const shop = yield this.getActiveShop();
            const customersCache = BFast.cache({ database: 'customers', collection: shop.projectId });
            return yield customersCache.set(customer.displayName, customer, {
                dtl: 360
            });
        });
    }
}
StorageService.ɵprov = i0.ɵɵdefineInjectable({ factory: function StorageService_Factory() { return new StorageService(i0.ɵɵinject(i1.EventService)); }, token: StorageService, providedIn: "root" });
StorageService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root'
            },] }
];
StorageService.ctorParameters = () => [
    { type: EventService }
];
//# sourceMappingURL=data:application/json;base64,