import { __awaiter } from "tslib";
import { Injectable } from '@angular/core';
import { HttpClient } from '@angular/common/http';
import { StorageService } from './storage.service';
import * as i0 from "@angular/core";
import * as i1 from "@angular/common/http";
import * as i2 from "./storage.service";
export class SettingsService {
    constructor(httpClient, storageService, indexDb) {
        this.httpClient = httpClient;
        this.storageService = storageService;
        this.indexDb = indexDb;
        this.ssmServerURL = 'https://smartstock-daas.bfast.fahamutech.com'; // environment.smartstock.databaseURL;
        this.ssmFunctionsURL = 'https://smartstock-faas.bfast.fahamutech.com'; // environment.smartstock.functionsURL;
        this.ssmHeader = {
            'X-Parse-Application-Id': 'smartstock'
        };
        this.ssmFunctionsHeader = {
            'bfast-application-id': 'smartstock',
            'content-type': 'application/json'
        };
    }
    getSSMUserHeader() {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                const user = yield this.storageService.getActiveUser();
                const activeShop = yield this.storageService.getActiveShop();
                if (!user) {
                    // console.log('no user records found');
                    throw new Error('no user records found');
                }
                if (user && user.sessionToken && activeShop && activeShop.applicationId) {
                    return {
                        'X-Parse-Application-Id': 'smartstock',
                        'X-Parse-Session-Token': user.sessionToken,
                        'Content-Type': 'application/json'
                    };
                }
                else {
                    throw new Error('token not found');
                }
            }
            catch (e) {
                throw { message: 'Fails to get user, so to retrieve token' };
            }
        });
    }
    getCustomerApplicationId() {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                const activeShop = yield this.storageService.getActiveShop();
                if (!activeShop) {
                    throw new Error('No user record');
                }
                return activeShop.applicationId;
            }
            catch (e) {
                throw { message: 'Fails to get application id', reason: e.toString() };
            }
        });
    }
    getCustomerServerURLId() {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                const activeShop = yield this.storageService.getActiveShop();
                if (!activeShop) {
                    throw new Error('No user in local storage');
                }
                return activeShop.projectUrlId;
            }
            catch (reason) {
                throw { message: 'Fails to get user', reason: reason.toString() };
            }
        });
    }
    getCustomerHeader() {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                return {
                    'X-Parse-Application-Id': yield this.getCustomerApplicationId()
                };
            }
            catch (e) {
                console.warn(e);
                return {};
            }
        });
    }
    getCustomerPostHeader(contentType) {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                return {
                    'X-Parse-Application-Id': yield this.getCustomerApplicationId(),
                    'content-type': contentType ? contentType : 'application/json'
                };
            }
            catch (e) {
                throw { message: 'Fails to get customer post header', reason: e.toString() };
            }
        });
    }
    getCustomerServerURL() {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                return `https://${yield this.getCustomerServerURLId()}.bfast.fahamutech.com`;
            }
            catch (e) {
                throw { message: 'Fails to get server url', reason: e.toString() };
            }
        });
    }
    getCustomerProjectId() {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                const activeShop = yield this.indexDb.getActiveShop();
                if (!activeShop) {
                    throw new Error('No user in local storage');
                }
                return activeShop.projectId;
            }
            catch (e) {
                throw { message: 'Fails to get project id', reason: e.toString() };
            }
        });
    }
    /**
     * @deprecated
     */
    getPrinterAddress(callback) {
        // this.indexDb.getItem<{ ip: string, name: string }>('printerAddress').then(value => {
        //   callback(null);
        // }).catch(reason => {
        //   console.log(reason);
        //   callback(null);
        // });
        callback(null);
    }
    saveSettings(settings) {
        return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            try {
                const activeShop = yield this.storageService.getActiveShop();
                this.httpClient.put(this.ssmFunctionsURL + '/settings/' + activeShop.projectId, settings, {
                    headers: this.ssmFunctionsHeader
                }).subscribe(_ => {
                    activeShop.settings = _.settings;
                    this.storageService.saveActiveShop(activeShop).then(_1 => {
                        resolve('Shop settings updated');
                    }).catch(reason => {
                        reject(reason);
                    });
                }, error => {
                    reject(error);
                });
            }
            catch (e) {
                reject(e);
            }
        }));
    }
    getSettings() {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                const activeShop = yield this.storageService.getActiveShop();
                if (!activeShop || !activeShop.settings) {
                    return {
                        printerFooter: 'Thank you',
                        printerHeader: '',
                        saleWithoutPrinter: true,
                        allowRetail: true,
                        allowWholesale: true,
                    };
                }
                return activeShop.settings;
            }
            catch (e) {
                throw { message: 'Fails to get settings', reason: e.toString() };
            }
        });
    }
}
SettingsService.ɵprov = i0.ɵɵdefineInjectable({ factory: function SettingsService_Factory() { return new SettingsService(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.StorageService), i0.ɵɵinject(i2.StorageService)); }, token: SettingsService, providedIn: "root" });
SettingsService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root'
            },] }
];
SettingsService.ctorParameters = () => [
    { type: HttpClient },
    { type: StorageService },
    { type: StorageService }
];
//# sourceMappingURL=data:application/json;base64,