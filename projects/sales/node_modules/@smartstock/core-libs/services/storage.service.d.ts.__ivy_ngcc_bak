import { EventService } from './event.service';
import { CacheController } from 'bfastjs/dist/controllers/CacheController';
import { UserModel } from '../models/user.model';
import { ShopModel } from '../models/shop.model';
import { CustomerModel } from '../models/customer.model';
import { StockModel } from '../models/stock.model';
import { BatchModel } from '../models/batch.model';
export declare class StorageService {
    private readonly eventApi;
    smartStockCache: CacheController;
    constructor(eventApi: EventService);
    getActiveUser(): Promise<UserModel>;
    saveSales(batchs: BatchModel[]): Promise<any>;
    getActiveShop(): Promise<ShopModel>;
    saveActiveShop(shop: ShopModel): Promise<any>;
    getCurrentProjectId(): Promise<string>;
    saveCurrentProjectId(projectId: string): Promise<any>;
    clearSmartStockCache(): Promise<any>;
    saveActiveUser(user: UserModel): Promise<any>;
    removeActiveShop(): Promise<any>;
    removeActiveUser(): Promise<any>;
    removeStocks(): Promise<any>;
    getStocks(): Promise<StockModel[]>;
    saveStocks(stocks: StockModel[]): Promise<any>;
    saveStock(stock: StockModel): Promise<StockModel>;
    getCustomers(): Promise<CustomerModel[]>;
    saveCustomer(customer: CustomerModel): Promise<CustomerModel>;
}
