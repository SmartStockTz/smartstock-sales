import { MatDialog } from '@angular/material/dialog';
import { HttpClient } from '@angular/common/http';
import { LogService } from './log.service';
import { StorageService } from './storage.service';
import { ShopModel } from '../models/shop.model';
import { UserModel } from '../models/user.model';
import { SettingsService } from './settings.service';
export declare class UserService {
    private readonly httpClient;
    private readonly settingsService;
    private readonly dialog;
    private readonly logger;
    private readonly storageService;
    constructor(httpClient: HttpClient, settingsService: SettingsService, dialog: MatDialog, logger: LogService, storageService: StorageService);
    currentUser(): Promise<any>;
    deleteUser(user: any): Promise<any>;
    getAllUser(pagination: {
        size: number;
        skip: number;
    }): Promise<UserModel[]>;
    getUser(user: UserModel, callback?: (user: UserModel) => void): void;
    login(user: {
        username: string;
        password: string;
    }): Promise<UserModel>;
    logout(user: UserModel): Promise<void>;
    register(user: UserModel): Promise<UserModel>;
    resetPassword(username: string): Promise<any>;
    refreshToken(): Promise<any>;
    addUser(user: UserModel): Promise<UserModel>;
    getShops(): Promise<ShopModel[]>;
    getCurrentShop(): Promise<ShopModel>;
    saveCurrentShop(shop: ShopModel): Promise<ShopModel>;
    createShop(data: {
        admin: UserModel;
        shop: ShopModel;
    }): Promise<ShopModel>;
    deleteShop(shop: ShopModel): Promise<ShopModel>;
    updatePassword(user: UserModel, password: string): Promise<any>;
    updateUser(user: UserModel, data: {
        [p: string]: any;
    }): Promise<UserModel>;
    updateCurrentUser(user: UserModel): Promise<UserModel>;
    changePasswordFromOld(data: {
        lastPassword: string;
        password: string;
        user: UserModel;
    }): Promise<any>;
}
