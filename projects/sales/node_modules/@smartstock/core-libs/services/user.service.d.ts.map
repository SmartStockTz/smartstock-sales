{"version":3,"file":"user.service.d.ts","sources":["user.service.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA","sourcesContent":["import { MatDialog } from '@angular/material/dialog';\nimport { HttpClient } from '@angular/common/http';\nimport { LogService } from './log.service';\nimport { StorageService } from './storage.service';\nimport { ShopModel } from '../models/shop.model';\nimport { UserModel } from '../models/user.model';\nimport { SettingsService } from './settings.service';\nexport declare class UserService {\n    private readonly httpClient;\n    private readonly settingsService;\n    private readonly dialog;\n    private readonly logger;\n    private readonly storageService;\n    constructor(httpClient: HttpClient, settingsService: SettingsService, dialog: MatDialog, logger: LogService, storageService: StorageService);\n    currentUser(): Promise<any>;\n    deleteUser(user: any): Promise<any>;\n    getAllUser(pagination: {\n        size: number;\n        skip: number;\n    }): Promise<UserModel[]>;\n    getUser(user: UserModel, callback?: (user: UserModel) => void): void;\n    login(user: {\n        username: string;\n        password: string;\n    }): Promise<UserModel>;\n    logout(user: UserModel): Promise<void>;\n    register(user: UserModel): Promise<UserModel>;\n    resetPassword(username: string): Promise<any>;\n    refreshToken(): Promise<any>;\n    addUser(user: UserModel): Promise<UserModel>;\n    getShops(): Promise<ShopModel[]>;\n    getCurrentShop(): Promise<ShopModel>;\n    saveCurrentShop(shop: ShopModel): Promise<ShopModel>;\n    createShop(data: {\n        admin: UserModel;\n        shop: ShopModel;\n    }): Promise<ShopModel>;\n    deleteShop(shop: ShopModel): Promise<ShopModel>;\n    updatePassword(user: UserModel, password: string): Promise<any>;\n    updateUser(user: UserModel, data: {\n        [p: string]: any;\n    }): Promise<UserModel>;\n    updateCurrentUser(user: UserModel): Promise<UserModel>;\n    changePasswordFromOld(data: {\n        lastPassword: string;\n        password: string;\n        user: UserModel;\n    }): Promise<any>;\n}\n"]}