import { AuthAdapter } from "./adapters/AuthAdapter";
import { CacheAdapter } from "./adapters/CacheAdapter";
import { HttpClientAdapter } from "./adapters/HttpClientAdapter";
export declare class BFastConfig {
    static DEFAULT_APP: string;
    private _DEFAULT_DOMAINS_CACHE_DB_NAME;
    DEFAULT_DOMAINS_CACHE_DB_NAME(): string;
    private _DEFAULT_AUTH_CACHE_DB_NAME;
    DEFAULT_AUTH_CACHE_DB_NAME(): string;
    private _DEFAULT_CACHE_DB_NAME;
    DEFAULT_CACHE_DB_NAME(): string;
    private _DEFAULT_CACHE_TTL_COLLECTION_NAME;
    DEFAULT_CACHE_TTL_COLLECTION_NAME(): string;
    private credentials;
    private constructor();
    private static instance;
    static getInstance(): BFastConfig;
    setCredential(config: AppCredentials, appName?: string): void;
    credential(appName?: string): AppCredentials;
    functionsURL(path: string, appName: string): string;
    databaseURL(appName: string, suffix?: string): string;
    cacheDatabaseName(name: string, appName: string): string;
    cacheCollectionName(name: string, appName: string): string;
    authAdapter(appName: string): AuthAdapter;
    cacheAdapter(appName: string): CacheAdapter;
    httpAdapter(appName: string): HttpClientAdapter | null;
}
export interface AppCredentials {
    applicationId: string;
    functionsURL?: string;
    projectId: string;
    databaseURL?: string;
    appPassword?: string;
    cache?: CacheConfigOptions;
    adapters?: {
        auth?: () => AuthAdapter;
        cache?: () => CacheAdapter;
        http?: () => HttpClientAdapter;
    };
}
export interface CacheConfigOptions {
    enable: boolean;
    collection?: string;
    ttlCollection?: string;
}
